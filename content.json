{"meta":{"title":"code","subtitle":"码总","description":"JVM相关，Spring，SpringBoot,SpringCloud,SpringMvc,Redis,Kafka,RabbitMQ,EleasticSearch","author":"Dong Liu","url":"https://liudong-code.github.io"},"pages":[{"title":"categories","date":"2020-02-20T02:52:59.000Z","updated":"2020-02-20T03:43:51.276Z","comments":true,"path":"categories/index.html","permalink":"https://liudong-code.github.io/categories/index.html","excerpt":"","text":"type: “categories” # 将页面的类型设置为 categories ，主题将自动为这个页面显示所有分类comments: true # 如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，设置为 false 这里也有 “—“"}],"posts":[{"title":"接口和抽象类的区别","slug":"接口和抽象类的区别","date":"2020-02-27T06:06:01.000Z","updated":"2020-02-27T06:08:01.712Z","comments":true,"path":"2020/02/27/接口和抽象类的区别/","link":"","permalink":"https://liudong-code.github.io/2020/02/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"","categories":[],"tags":[{"name":"Java基础知识","slug":"Java基础知识","permalink":"https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"keywords":[]},{"title":"抽象类的意义","slug":"抽象类的意义","date":"2020-02-27T05:53:43.000Z","updated":"2020-02-27T06:07:43.236Z","comments":true,"path":"2020/02/27/抽象类的意义/","link":"","permalink":"https://liudong-code.github.io/2020/02/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%84%8F%E4%B9%89/","excerpt":"","text":"抽象类的意义最主要的：对代码的维护和重用。 关键字 1abstract 1.因为抽象类不能实例化对象，所以必须要有子类来实现它之后才能使用。这样就可以把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护 2.当又有一个具有相似的组件产生时，只需要实现该抽象类就可以获得该抽象类的那些属性和方法。 ​ 实际写代码的过程中，如果想要对某一个接口进行默认实现，并且不希望在该实现类 上创建实例，那么抽象类是一个不错地选择。","categories":[],"tags":[{"name":"Java基础知识","slug":"Java基础知识","permalink":"https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"keywords":[]},{"title":"int与Integer的区别","slug":"int与Integer的区别","date":"2020-02-27T05:13:32.000Z","updated":"2020-02-27T05:34:38.327Z","comments":true,"path":"2020/02/27/int与Integer的区别/","link":"","permalink":"https://liudong-code.github.io/2020/02/27/int%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"int1int 是java的基本数据类型。 Integer1Integer 继承了Object类，是对象类型，是 int 的包装类。 int 与 Integer 的区别1,值的储存​ int储存在栈中 ​ Integer对象的引用储存在栈中，对象的数据储存在堆中。 2,初始化​ int初始值是0 ​ Integer的初始值是null 3,传参​ int是值传递 ​ Integer是引用传递，引用不可改变但是引用指向堆空间地址的值是可以改变的。 4,泛型支持​ 泛型不支持int，但是支持Integer。 5,运算​ int 可以直接做运算，是类的特性。​ Integer 的对象可以调用该类的方法，但是在拆箱之前不能进行运算，需要转化为基本类型int。 相同值下的 int 和 Integer 的比较结果​ 1,两个通过new生成的变量，结果为false。​ 2,int 和 Integer 的值比较，若两者的值相等，则为true。​ （注意：在比较时，Integer会自动拆箱为int类型，然后再做比较。）​ 3,new 生成的Integer变量 和 非new 生成的Integer变量比较，，结果为false。​ （注意：new 生成的Integer变量的值在堆空间中，非new 生成的Integer变量的值在在常量池中。）​ （注意：非new生成的Integer变量，会先判断常量池中是否有该对象，若有则共享，若无则在常量池中放入 该对象；也叫享元模式，后面再说。）​ 4,两个非new 生成的Integer对象比较，则结果为true。​ （注意：此处需要一个前提：值的范围在 -128 ~ 127 之间。​ 涉及到java对 int 与 Integer 的自动装箱和拆箱的一种模式：享元模式—flyweight，为了加强对简单数字的重 复利用。​ 在赋值时，其实是执行了Integer的valueOf()方法。​ 当值在 -128 ~ 127之间时，java会进行自动装箱，然后会对值进行缓存，如果下次再有相同的值，会直接在 缓存中取出使用。缓存是通过Integer的内部类IntegerCache来完成的。​ 当值超出此范围，会在堆中new出一个对象来存储。​ PS：自动装箱与拆箱是在JDK1.5中出现的。 12345678910111213141516public static void main(String[] args) &#123; int a =12; Integer b =12; Integer c = new Integer(12); Integer d=128; Integer e=128; System.out.println(a==b); System.out.println(b==c); System.out.println(d==e); &#125;truefalsefalse ​ 5,内部类IntegerCache​ 通过此类可以缓存简单数字。​ 缓存的数大小可以由 -XX：AutoBoxCacheMax = 控制。​ jvm初始化时，java.lang.Integer.Integ","categories":[],"tags":[{"name":"Java基础知识","slug":"Java基础知识","permalink":"https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"keywords":[]},{"title":"Java知识点梳理","slug":"Java中==和equals和hashCode的区别","date":"2020-02-27T02:00:49.000Z","updated":"2020-02-27T03:48:36.587Z","comments":true,"path":"2020/02/27/Java中==和equals和hashCode的区别/","link":"","permalink":"https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD==%E5%92%8Cequals%E5%92%8ChashCode%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"Java中==和equals和hashCode的区别1，==1, 基础类型：byte,short,char,int,double,boolean,float ​ 他们之间用“==”，比较的是他们的值 2, 引用类型（类，接口，数组） ​ 使用“==”进行比较的时候，比较的是内存地址 12345678910111213141516public static void main(String[] args) &#123; String str1 = new String(\"str\"); String str2 = new String(\"str\"); System.out.println(\"str1==str2:\" + (str1 == str2)); String str3=\"str\"; String str4=\"str\"; System.out.println(str3 == str4); System.out.println(System.identityHashCode(str1)); System.out.println(System.identityHashCode(str2)); System.out.println(System.identityHashCode(str3)); System.out.println(System.identityHashCode(str4)); &#125; 结果为 str1==str2:falsetrue323247493111501236338603633860 对象是放在堆中的，栈中存放的是对象的引用（地址）。由此可见’==’是对栈中的值进行比较的。如果要比较堆 中对象的内容是否相同，那么就要重写equals方法了。 但是这行代码，128！=128，a!=b 123456Integer a1 = 127;Integer b1 = 127;Integer a = 128;Integer b = 128;System.out.println(a1==b1);System.out.println(a==b); 结果 true false 去看Integer的源码可以明白，是这段源码 12345678910111213141516171819202122232425262728293031323334private static class IntegerCache &#123; static final int low = -128; static final int high; static final Integer cache[]; static &#123; // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\"); if (integerCacheHighPropValue != null) &#123; try &#123; int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); &#125; catch( NumberFormatException nfe) &#123; // If the property cannot be parsed into an int, ignore it. &#125; &#125; high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high &gt;= 127; &#125; private IntegerCache() &#123;&#125; &#125; Integer对于 对于-128到127之间的数，会进行缓存 。 2，equals() 1,默认没有重新的情况下，都调用的是Objects 的equals（）的方法，源码如下： 1public boolean equals(Object obj) &#123; return (this == obj);&#125; ​ 可以看到是Objects中的equal（）方法和== 是等同的。 2，日常的代码中会覆盖equal() 方法，下面是string 类 重写的equal（）方法 123456789101112131415161718192021public boolean equals(Object anObject) &#123; if (this == anObject) &#123; return true; &#125; if (anObject instanceof String) &#123; String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) &#123; char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) &#123; if (v1[i] != v2[i]) return false; i++; &#125; return true; &#125; &#125; return false; &#125; ​ 逻辑很明显： ​ 内存地址相同，直接返回true ​ 比较对象是String类型，直接返回false ​ a和b长度不同，直接返回false ​ 逐个字符比较，有不同就返回false equal重写注意的五个原则​ 1 自反性：对任意引用值X，x.equals(x)的返回值一定为true.​ 2 对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true;​ 3 传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true​ 4 一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变​ 5 非空性：任何非空的引用值X，x.equals(null)的返回值一定为false 3，hashCodeObjects给出的hashCode（）的原生代码是： 1public native int hashCode(); 返回时的一个int 类型的数值。 下面是引用摘抄的 ======================================================================================= hashCode()方法返回的就是一个数值，从方法的名称上就可以看出，其目的是生成一个hash码。hash码的主要用途就是在对对象进行散列的时候作为key输入，据此很容易推断出，我们需要每个对象的hash码尽可能不同，这样才能保证散列的存取性能。事实上，Object类提供的默认实现确实保证每个对象的hash码不同（在对象的内存地址基础上经过特定算法返回一个hash码）。Java采用了哈希表的原理。哈希（Hash）实际上是个人名，由于他提出一哈希算法的概念，所以就以他的名字命名了。 哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。 散列函数,散列算法,哈希函数。是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数将任意长度的二进制值映射为较短的固定长度的二进制值，这个小的二进制值称为哈希值。好的散列函数在输入域中很少出现散列冲突。 ====================================================================================== hashCode的作用想要明白，必须要先知道Java中的集合。 总的来说，Java中的集合（Collection）有两类，一类是List，再有一类是Set。前者集合内的元素是有序的，元素可以重复；后者元素无序，但元素不可重复。 那么这里就有一个比较严重的问题了：要想保证元素不重复，可两个元素是否重复应该依据什么来判断呢？ 这就是Object.equals方法了。但是，如果每增加一个元素就检查一次，那么当元素很多时，后添加到集合中的元素比较的次数就非常多了。也就是说，如果集合中现在已经有1000个元素，那么第1001个元素加入集合时，它就要调用1000次equals方法。这显然会大大降低效率。于是，Java采用了哈希表的原理。 这样一来，当集合要添加新的元素时， 先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。 如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了； 如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存，不相同就散列其它的地址。所以这里存在一个冲突解决的问题。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。 4、eqauls方法和hashCode方法关系Java对于eqauls方法和hashCode方法是这样规定的： (1)同一对象上多次调用hashCode()方法，总是返回相同的整型值。 (2)如果a.equals(b)，则一定有a.hashCode() 一定等于 b.hashCode()。(3)如果!a.equals(b)，则a.hashCode() 不一定等于 b.hashCode()。此时如果a.hashCode() 总是不等于 b.hashCode()，会提高hashtables的性能。 (4)a.hashCode()==b.hashCode() 则 a.equals(b)可真可假 (5)a.hashCode()！= b.hashCode() 则 a.equals(b)为假。 上面结论简记： 1、如果两个对象equals，Java运行时环境会认为他们的hashcode一定相等。2、如果两个对象不equals，他们的hashcode有可能相等。3、如果两个对象hashcode相等，他们不一定equals。4、如果两个对象hashcode不相等，他们一定不equals。 关于这两个方法的重要规范：规范1：若重写equals(Object obj)方法，有必要重写hashcode()方法，确保通过equals(Object obj)方法判断结果为true的两个对象具备相等的hashcode()返回值。说得简单点就是：“如果两个对象相同，那么他们的hashcode应该相等”。不过请注意：这个只是规范，如果你非要写一个类让equals(Object obj)返回true而hashcode()返回两个不相等的值，编译和运行都是不会报错的。不过这样违反了Java规范，程序也就埋下了BUG。 规范2：如果equals(Object obj)返回false，即两个对象“不相同”，并不要求对这两个对象调用hashcode()方法得到两个不相同的数。说的简单点就是：“如果两个对象不相同，他们的hashcode可能相同”。 5、为什么覆盖equals时总要覆盖hashCode 一个很常见的错误根源在于没有覆盖hashCode方法。在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable。 1.在应用程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法都必须始终如一地返回同一个整数。在同一个应用程序的多次执行过程中，每次执行所返回的整数可以不一致。 2.如果两个对象根据equals()方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。 3.如果两个对象根据equals()方法比较是不相等的，那么调用这两个对象中任意一个对象的hashCode方法，则不一定要产生相同的整数结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提高散列表的性能。 6、总结：1、equals方法用于比较对象的内容是否相等（覆盖以后） 2、hashcode方法只有在集合中用到 3、当覆盖了equals方法时，比较对象是否相等将通过覆盖后的equals方法进行比较（判断对象的内容是否相等）。 4、将对象放入到集合中时，首先判断要放入对象的hashcode值与集合中的任意一个元素的hashcode值是否相等，如果不相等直接将该对象放入集合中。如果hashcode值相等，然后再通过equals方法判断要放入对象与集合中的任意一个对象是否相等，如果equals判断不相等，直接将该元素放入到集合中，否则不放入。 以上从第四点以后转载至博客：https://blog.csdn.net/hla199106/article/details/46907725","categories":[],"tags":[{"name":"Java基础知识","slug":"Java基础知识","permalink":"https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"keywords":[]},{"title":"我的第一篇博客","slug":"写于博客之始","date":"2020-02-26T10:00:08.000Z","updated":"2020-02-27T01:57:50.830Z","comments":true,"path":"2020/02/26/写于博客之始/","link":"","permalink":"https://liudong-code.github.io/2020/02/26/%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%A7%8B/","excerpt":"","text":"重新整理了之前的旧的博客，发现有部分博客有老东家的Code，想起来之前有同事因无意中泄露了公司的淘宝三段码，而受到处罚，索性就新搞了一个新的博客 地址，这几天正好因为疫情在家里面，找工作也不是很好找，就把之前的整理的东西全部搞过来。新的博客只弄了主题，其他的细节都还没整，想的是尽快的把日常干货先给弄上来。嗯，就这些吧！​","categories":[],"tags":[{"name":"日常随笔","slug":"日常随笔","permalink":"https://liudong-code.github.io/tags/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/"}],"keywords":[]}]}