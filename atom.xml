<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code</title>
  
  <subtitle>码总</subtitle>
  <link href="/liudong-code.github.io/atom.xml" rel="self"/>
  
  <link href="https://liudong-code.github.io/"/>
  <updated>2020-02-27T08:56:23.504Z</updated>
  <id>https://liudong-code.github.io/</id>
  
  <author>
    <name>Liu Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>final，finally，finalize的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/final%EF%BC%8Cfinally%EF%BC%8Cfinalize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/final%EF%BC%8Cfinally%EF%BC%8Cfinalize%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T08:31:46.000Z</published>
    <updated>2020-02-27T08:56:23.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-简单区别："><a href="#1-简单区别：" class="headerlink" title="1.简单区别："></a>1.简单区别：</h3><ul><li>final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</li><li>finally是异常处理语句结构的一部分，表示总是执行。</li><li>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul><h3 id="2-中等区别："><a href="#2-中等区别：" class="headerlink" title="2.中等区别："></a>2.中等区别：</h3><ul><li>final：java中的关键字，修饰符。</li><li>如果一个类被声明为final，就意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能同时被声明为abstract抽象类的和final的类。</li><li>如果将变量或者方法声明为final，可以保证它们在使用中不被改变.<br>  　　    1)被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。<br>  　　    2)被声明final的方法只能使用，不能重载。</li><li>finally：java的一种异常处理机制。</li><li>finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</li></ul><ul><li>finalize：Java中的一个方法名。<br>Java技术使用finalize()方法在垃圾收集器将对象从内存中清除出去前，做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没被引用时对这个对象调用的。它是在Object类中定义的，因此所的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。</li></ul><h3 id="3-详细区别："><a href="#3-详细区别：" class="headerlink" title="3.详细区别："></a>3.详细区别：</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><ul><li>第一种情况：<br>如果final修饰的是一个基本类型，就表示这个变量被赋予的值是不可变的，即它是个常量；<br>如果final修饰的是一个对象，就表示这个变量被赋予的引用是不可变的<br>这里需要提醒大家注意的是，不可改变的只是这个变量所保存的引用，并不是这个引用所指向的对象。</li><li>第二种情况：<br>final的含义与第一种情况相同。<br>实际上对于前两种情况，一种更贴切的表述final的含义的描述，那就是，如果一个变量或方法参数被final修饰，就表示它只能被赋值一次，但是JAVA虚拟机为变量设定的默认值不记作一次赋值。被final修饰的变量必须被初始化。初始化的方式以下几种：<br>1.在定义的时候初始化。<br>2.final变量可以在初始化块中初始化，不可以在静态初始化块中初始化。<br>3.静态final变量可以在定义时初始化，也可以在静态初始化块中初始化，不可以在初始化块中初始化。<br>4.final变量还可以在类的构造器中初始化，但是静态final变量不可以。</li></ul><h5 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h5><pre><code>当final用来定义一个方法时，它表示这个方法不可以被子类重写，但是并不影响它被子类继承。我们写段代码来验证一下： </code></pre><h5 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h5><p>​        final类不允许被继承，编译器在处理时把它的所方法都当作final的，因此final类比普通类拥更高的效率。而由关键字abstract定义的抽象类含必须由继承自它的子类重载实现的抽象方法，因此无法同时用final和abstract来修饰同一个类。同样的道理，final也不能用来修饰接口。 final的类的所方法都不能被重写，但这并不表示final的类的属性（变量值也是不可改变的，要想做到final类的属性值不可改变，必须给它增加final修饰</p><h4 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h4><p>​         finally只能用在try/catch语句中并且附带着一个语句块，表示这段语句最终总是被执行 。</p><h4 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h4><p>​        它是一个方法，属于java.lang.Object类，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span><span class="keyword">throws</span> Throwable</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​        众所周知，finalize()方法是GC  （garbagecollector）运行机制的一部分,在此我们只说说finalize()方法的作用是什么呢？finalize()方法是在GC清理它所从属的对象时被调用的，如果执行它的过程中抛出了无法捕获的异常（uncaughtexception），GC将终止对改对象的清理，并且该异常会被忽略；直到下一次GC开始清理这个对象时，它的finalize()会被再次调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-简单区别：&quot;&gt;&lt;a href=&quot;#1-简单区别：&quot; class=&quot;headerlink&quot; title=&quot;1.简单区别：&quot;&gt;&lt;/a&gt;1.简单区别：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。&lt;/l
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T08:04:55.000Z</published>
    <updated>2020-02-27T08:22:29.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>《系统架构师》一书中给出的定义是：</p><ul><li><strong>进程</strong>（process）是资源分配和独立运行的基本单位。研究操作系统的进程，实质是研究系统中诸多进程之间的并发特性以及进程之间的相互制约性。</li><li><strong>线程</strong>是进程中的一个实体，是被系统独立分配和调度的基本操作单位。具有就绪、运行、阻塞三种状态。</li></ul><p>一个进程有若干个线程，线程只拥有一些运行中必不可少的资源，它可与同一个进程的其他线程共享进程所拥有的的全部资源。线程可创建另外一个线程，同一个进程中的多个线程可并发执行。</p><h3 id="Linux中的概念"><a href="#Linux中的概念" class="headerlink" title="Linux中的概念"></a>Linux中的概念</h3><ul><li><p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。 </p></li><li><p>Linux系统函数<code>fork()</code>可以在父进程中创建一个子进程，这样的话，在一个进程接到来自客户端新的请求时就可以复制出一个子进程让其来处理，父进程只需负责监控请求的到来，然后创建子进程让其去处理，这样就能做到并发处理。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print('当前进程:%s 启动中 ....' % os.getpid())</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print('子进程:%s,父进程是:%s' % (os.getpid(), os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print('进程:%s 创建了子进程:%s' % (os.getpid(),pid ))</span><br><span class="line">        </span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">当前进程:<span class="number">27223</span> 启动中 ....</span><br><span class="line">进程:<span class="number">27223</span> 创建了子进程:<span class="number">27224</span></span><br><span class="line">子进程:<span class="number">27224</span>,父进程是:<span class="number">27223</span></span><br></pre></td></tr></table></figure></li><li><p>线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。 </p></li></ul><h3 id="区别和优劣"><a href="#区别和优劣" class="headerlink" title="区别和优劣"></a>区别和优劣</h3><ul><li><p>进程是资源分配的最小单位，线程是程序执行的最小单位。</p></li><li><p>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</p></li><li><p>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</p></li><li><p>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</p><p>参考书籍《Unix网络编程》</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;《系统架构师》一书中给出的定义是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;（process）是资源分配和独立运行的
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>泛型中extends和super的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E6%B3%9B%E5%9E%8B%E4%B8%ADextends%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E6%B3%9B%E5%9E%8B%E4%B8%ADextends%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T07:35:59.000Z</published>
    <updated>2020-02-27T07:58:34.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="释义："><a href="#释义：" class="headerlink" title="释义："></a>释义：</h3><p>在非泛型中：</p><ul><li><code>extends</code>：让一个类继承另外一个类；</li><li><code>super</code>：指向父类对象的引用；</li></ul><p>在泛型中：</p><ul><li><code>extends</code>也成为上界通配符，就是指定上边界。即泛型中的类必须为当前类的子类或当前类。</li><li><code>super</code>也称为下届通配符，就是指定下边界。即泛型中的类必须为当前类或者其父类。</li></ul><p>看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExtends</span><span class="params">(List&lt;? extends Fruit&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//报错,extends为上界通配符,只能取值,不能放.</span></span><br><span class="line">    <span class="comment">//因为Fruit的子类不只有Apple还有Banana,这里不能确定具体的泛型到底是Apple还是Banana，所以放入任何一种类型都会报错</span></span><br><span class="line">    <span class="comment">//list.add(new Apple());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以正常获取</span></span><br><span class="line">    Fruit fruit = list.get(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuper</span><span class="params">(List&lt;? <span class="keyword">super</span> Fruit&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//super为下界通配符，可以存放元素，但是也只能存放当前类或者子类的实例，以当前的例子来讲，</span></span><br><span class="line">    <span class="comment">//无法确定Fruit的父类是否只有Food一个(Object是超级父类)</span></span><br><span class="line">    <span class="comment">//因此放入Food的实例编译不通过</span></span><br><span class="line">    list.add(<span class="keyword">new</span> Apple());</span><br><span class="line">    <span class="comment">// list.add(new Food());</span></span><br><span class="line">    Object object = list.get(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p> 在testExtends方法中，因为泛型中用的是extends，在向list中存放元素的时候，我们并不能确定List中的元素的具体类型，即可能是Apple也可能是Banana。因此调用add方法时，不论传入new Apple()还是new Banana()，都会出现编译错误。</p></li><li><p>理解了extends之后，再看super就很容易理解了，即我们不能确定testSuper方法的参数中的泛型是Fruit的哪个父类，因此在调用get方法时只能返回Object类型。结合extends可见，在获取泛型元素时，使用extends获取到的是泛型中的上边界的类型(本例子中为Fruit),范围更小。</p></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>在使用泛型时，存取元素时用<code>super</code>,获取元素时，用<code>extends</code>。</p><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><p> 通配符 <code>?</code> 使用 </p><p> 在泛型中的通配符就是一个<strong>问号</strong>，标准叫法是<strong>无界通配符</strong>，它一般使用在参数或变量的声明上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在参数中使用无界通配符 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123; </span><br><span class="line">     Object o = list.get(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在变量声明中使用无界通配符</span></span><br><span class="line">    List&lt;?&gt; list2 = list1;</span><br><span class="line"></span><br><span class="line">    test(list1);</span><br><span class="line">    test(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>泛型中使用无界通配符，表示泛型可以是任意具体的类型，没有限制（基本数据类型除外，基本数据类型不能用作泛型，可以使用基本数据类型的包装类）； </p></li><li><p>所以无界通配符给人的感觉就和原生的类型没什么区别，比如就上面这段代码，使用List&lt;?&gt;，和直接使用List，好像是一样的；但是实际上还是有一些区别的，比如看下面这段代码: </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在参数中使用无界通配符 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123; </span><br><span class="line">     <span class="comment">// 均编译错误，因为使用了无界通配符，编译器无法确定具体是什么类型</span></span><br><span class="line">    <span class="comment">// list.add(1111);</span></span><br><span class="line">    <span class="comment">// list.add("aaa");</span></span><br><span class="line">    <span class="comment">// list.add(new Object());</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在参数中使用原生List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译通过，不加泛型时，编译器默认为Object类型</span></span><br><span class="line">    list.add(<span class="number">1111</span>);</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="keyword">new</span> Object());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 声明两个泛型明确的list集合</span></span><br><span class="line">    List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 调用使用了&lt;？&gt;的方法</span></span><br><span class="line">    test1(list1);</span><br><span class="line">    test2(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>List</strong>：表示可以存储任意Object类型的集合；</li><li><strong>List</strong>：表示一个存储某种<strong>特定类型</strong>的List集合，但是不知道这种特定类型是什么；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;释义：&quot;&gt;&lt;a href=&quot;#释义：&quot; class=&quot;headerlink&quot; title=&quot;释义：&quot;&gt;&lt;/a&gt;释义：&lt;/h3&gt;&lt;p&gt;在非泛型中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extends&lt;/code&gt;：让一个类继承另外一个类；&lt;/li&gt;
&lt;li&gt;&lt;co
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>String，Stringbuffer，StringBuilder的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/String%EF%BC%8CStringbuffer%EF%BC%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/String%EF%BC%8CStringbuffer%EF%BC%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T07:16:10.000Z</published>
    <updated>2020-02-27T07:19:07.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>  string类是不可变的：创建一个String对象之后，任何对这个对象的改变都会引起一个新的String对象生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str =<span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">str = str +<span class="string">"def"</span>;<span class="comment">//这一步jvm会再次创建一个String对象</span></span><br></pre></td></tr></table></figure><p>第二次其实jvm又生成了一个String类，而不是直接覆盖原来的”abc”，因此我们说String类是不可改变类。这一种特性会带来一个问题，每次拼接都要创建都要创建一次对象，当我们要拼接大量字符串的时候，效率会变得非常非常慢。</p><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a><strong>StringBuffer</strong></h3><p> StringBuffer 不同于String的是，stringbuffer 是可变的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb =<span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"> sb.append(<span class="string">"efg"</span>);<span class="comment">//并没有创建一个新的对象</span></span><br></pre></td></tr></table></figure><p>这里第二步并没有产生一个新的对象，而是在原来的基础上追加字符串，这种方式在拼接字符串的时候效率肯定比String要高得多。</p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>StringBuffer和StringBuilder类的区别也是如此，他们的原理和操作基本相同，区别在于StringBuffer支持并发操作，线性安全的，适 合多线程中使用。StringBuilder不支持并发操作，线性不安全的，不适合多线程中使用。新引入的StringBuilder类不是线程安全的，但其在单线程中的性能比StringBuffer高。</p><h3 id="total"><a href="#total" class="headerlink" title="total:"></a>total:</h3><p>1.如果要操作少量的数据用 String</p><p>2.单线程操作字符串缓冲区下操作大量数据用StringBuilder</p><p>3.多线程操作字符串缓冲区下操作大量数据用StringBuffer</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h3&gt;&lt;p&gt;  string类是不可变的：创建一个String对象之后，任何对这个对象的改变都会引起一个新的String
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java中的可变对象与不可变对象</title>
    <link href="https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
    <id>https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-02-27T06:59:24.000Z</published>
    <updated>2020-02-27T07:09:51.291Z</updated>
    
    <content type="html"><![CDATA[<h4 id="不可变对象-（Immutable-Objects）"><a href="#不可变对象-（Immutable-Objects）" class="headerlink" title="不可变对象 （Immutable Objects）"></a>不可变对象 （Immutable Objects）</h4><p>​         对象一旦被创建它的状态（对象的数据，也即对象属性值）就不能改变，任何对它的改变都应该产生一个新的对象。 </p><p>​         不可变对象的类即为不可变类(Immutable Class)。JAVA平台类库中包含许多不可变类，如String、基本类型的包装类、BigInteger和BigDecimal等 .</p><h4 id="可变对象-Mutable-Objects"><a href="#可变对象-Mutable-Objects" class="headerlink" title="可变对象(Mutable Objects)"></a>可变对象(Mutable Objects)</h4><p>​         相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。 </p><h4 id="编写不可变类"><a href="#编写不可变类" class="headerlink" title="编写不可变类"></a>编写不可变类</h4><p>   1.确保类不能被继承：将类声明为final, 或者使用静态工厂并声明构造器为private </p><ol start="2"><li><p>使用private和final修饰符来修饰该类的属性 </p></li><li><p>如果成员属性为可变对象属性，不要使这些对象改变： </p><p>1）不要提供更改可变对象的方法 </p><p>2）不要共享对可变对象的引用，不要存储传给构造器的外部可变对象的引用。因为引用可变对象的成员变量和外部可变对象的引用指向同一块内存地址，用户可以在不可变类之外通过修改可变对象的值 </p><p>为了保证内部的值不被修改，可以采用深度拷贝的方法来复制一个对象并传入副本的引用来确保类的不可变 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImmutableDemo</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] myArray;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyImmutableDemo</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.myArray = array.clone();   </span><br><span class="line"></span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> C. 不要提供任何可以修改对象状态的方法（不仅仅是set方法, 还有任何其它可以改变状态的方法） </p><h4 id="不可变对象的优缺点"><a href="#不可变对象的优缺点" class="headerlink" title="不可变对象的优缺点"></a>不可变对象的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>* 构造、测试和使用都很简单</p><p>* 不可变对象是线程安全的，在线程之间可以相互共享，不需要利用特殊机制来保证同步问题，因为对象的值无法改变。可以降低并发错误的可能性，因为不需要用一些锁机制等保证内存一致性问题也减少了同步开销。</p><p>* 不可变对象可以被重复使用，可以将它们缓存起来重复使用，就像字符串字面量和整型数字一样。可以使用静态工厂方法来提供类似于valueOf()这样的方法，它可以从缓存中返回一个已经存在的Immutable对象，而不是重新创建一个。</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p> * 不可变对象最大的缺点就是创建对象的开销，因为每一步操作都会产生一个新的对象,制造大量垃圾，由于他们不能被重用而且对于它们的使用就是”用“然后”扔“，会创造很多的垃圾，给垃圾收集带来很大的麻烦 </p><p>参考：<a href="https://blog.csdn.net/bupa900318/article/details/80696785" target="_blank" rel="noopener">https://blog.csdn.net/bupa900318/article/details/80696785</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;不可变对象-（Immutable-Objects）&quot;&gt;&lt;a href=&quot;#不可变对象-（Immutable-Objects）&quot; class=&quot;headerlink&quot; title=&quot;不可变对象 （Immutable Objects）&quot;&gt;&lt;/a&gt;不可变对象 （Immu
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>接口和抽象类的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T06:06:01.000Z</published>
    <updated>2020-02-27T07:43:41.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span></span><br></pre></td></tr></table></figure><p>​        抽象类必须用abstract 修饰，子类必须实现抽象类中的抽象方法，如果有方法未实现，那么子类的该方法也要用abstract 修饰。</p><p>​        默认的权限修饰符是：public，也可以是procted.如果是private的话，子类无法继承。</p><p>​        抽象类无法创建对象。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span></span></span><br></pre></td></tr></table></figure><p>​        接口中的变量隐式的使用Public static final 修饰，也要给出初始值</p><p>​        接口中的方法隐式的使用public abstract 修饰，只能是public  修饰。</p><p>​        接口中的方法默认的不能有实现（JDK1.8可以有默认实现）。</p><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ol><li>抽象类只能继承一次，但是可以有多个接口。</li><li>继承于抽象类或者接口的类，必须实现其中的所有方法，抽象类中的为实现的抽象方法，子类也需要定义为抽象类。</li><li>抽象类可以有非抽象方法。</li><li>接口的变量必须由public static final 修饰，并给出初始值，所以其实现类不能重新定义，也不能改变其值。</li><li>接口的方法默认是public abstract ，不能是static，抽象类中可以有static方法。</li><li>接口的方法也不允许子类覆写。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>抽象类的意义</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2020-02-27T05:53:43.000Z</published>
    <updated>2020-02-27T06:07:43.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抽象类的意义"><a href="#抽象类的意义" class="headerlink" title="抽象类的意义"></a>抽象类的意义</h3><p>最主要的：对代码的维护和重用。</p><p>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span></span><br></pre></td></tr></table></figure><p> <strong>1.因为抽象类不能实例化对象，所以必须要有子类来实现它之后才能使用。这样就可以把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护</strong> </p><p> <strong>2.当又有一个具有相似的组件产生时，只需要实现该抽象类就可以获得该抽象类的那些属性和方法。</strong>  </p><p>​    实际写代码的过程中，如果想要对某一个接口进行默认实现，并且不希望在该实现类 上创建实例，那么抽象类是一个不错地选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;抽象类的意义&quot;&gt;&lt;a href=&quot;#抽象类的意义&quot; class=&quot;headerlink&quot; title=&quot;抽象类的意义&quot;&gt;&lt;/a&gt;抽象类的意义&lt;/h3&gt;&lt;p&gt;最主要的：对代码的维护和重用。&lt;/p&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>int与Integer的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/int%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/int%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T05:13:32.000Z</published>
    <updated>2020-02-27T05:34:38.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> 是java的基本数据类型。</span><br></pre></td></tr></table></figure><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer 继承了Object类，是对象类型，是 <span class="keyword">int</span> 的包装类。</span><br></pre></td></tr></table></figure><h2 id="int-与-Integer-的区别"><a href="#int-与-Integer-的区别" class="headerlink" title="int 与 Integer 的区别"></a>int 与 Integer 的区别</h2><h5 id="1-值的储存"><a href="#1-值的储存" class="headerlink" title="1,值的储存"></a>1,值的储存</h5><p>​        int储存在栈中</p><p>​        Integer对象的引用储存在栈中，对象的数据储存在堆中。</p><h5 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2,初始化"></a>2,初始化</h5><p>​        int初始值是0</p><p>​        Integer的初始值是null</p><h5 id="3-传参"><a href="#3-传参" class="headerlink" title="3,传参"></a>3,传参</h5><p>​        int是值传递</p><p>​        Integer是引用传递，引用不可改变但是引用指向堆空间地址的值是可以改变的。</p><h5 id="4-泛型支持"><a href="#4-泛型支持" class="headerlink" title="4,泛型支持"></a>4,泛型支持</h5><p>​        泛型不支持int，但是支持Integer。</p><h5 id="5-运算"><a href="#5-运算" class="headerlink" title="5,运算"></a>5,运算</h5><p>​        int 可以直接做运算，是类的特性。<br>​        Integer 的对象可以调用该类的方法，但是在拆箱之前不能进行运算，需要转化为基本类型int。</p><h4 id="相同值下的-int-和-Integer-的比较结果"><a href="#相同值下的-int-和-Integer-的比较结果" class="headerlink" title="相同值下的 int 和 Integer 的比较结果"></a>相同值下的 int 和 Integer 的比较结果</h4><p>​    1,两个通过new生成的变量，结果为false。<br>​    2,int 和 Integer 的值比较，若两者的值相等，则为true。<br>​        （注意：在比较时，Integer会自动拆箱为int类型，然后再做比较。）<br>​    3,new 生成的Integer变量 和 非new 生成的Integer变量比较，，结果为false。<br>​        （注意：new 生成的Integer变量的值在堆空间中，非new 生成的Integer变量的值在在常量池中。）<br>​        （注意：非new生成的Integer变量，会先判断常量池中是否有该对象，若有则共享，若无则在常量池中放入            该对象；也叫享元模式，后面再说。）<br>​    4,两个非new 生成的Integer对象比较，则结果为true。<br>​        （注意：此处需要一个前提：值的范围在 -128 ~ 127 之间。<br>​        涉及到java对 int 与 Integer 的自动装箱和拆箱的一种模式：享元模式—flyweight，为了加强对简单数字的重        复利用。<br>​        在赋值时，其实是执行了Integer的valueOf()方法。<br>​        当值在 -128 ~ 127之间时，java会进行自动装箱，然后会对值进行缓存，如果下次再有相同的值，会直接在        缓存中取出使用。缓存是通过Integer的内部类IntegerCache来完成的。<br>​        当值超出此范围，会在堆中new出一个对象来存储。<br>​        PS：自动装箱与拆箱是在JDK1.5中出现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">int</span> a =<span class="number">12</span>;</span><br><span class="line">         Integer b =<span class="number">12</span>;</span><br><span class="line">         Integer c = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">         Integer d=<span class="number">128</span>;</span><br><span class="line">         Integer e=<span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a==b);</span><br><span class="line">        System.out.println(b==c);</span><br><span class="line">        System.out.println(d==e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>​    5,内部类IntegerCache<br>​        通过此类可以缓存简单数字。<br>​        缓存的数大小可以由 -XX：AutoBoxCacheMax = 控制。<br>​        jvm初始化时，java.lang.Integer.Integ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;int&quot;&gt;&lt;a href=&quot;#int&quot; class=&quot;headerlink&quot; title=&quot;int&quot;&gt;&lt;/a&gt;int&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java==和equals和hashCode的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD==%E5%92%8Cequals%E5%92%8ChashCode%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD==%E5%92%8Cequals%E5%92%8ChashCode%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T02:00:49.000Z</published>
    <updated>2020-02-27T08:54:31.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中-和equals和hashCode的区别"><a href="#Java中-和equals和hashCode的区别" class="headerlink" title="Java中==和equals和hashCode的区别"></a>Java中==和equals和hashCode的区别</h2><h3 id="1，"><a href="#1，" class="headerlink" title="1，=="></a>1，==</h3><p>1, 基础类型：byte,short,char,int,double,boolean,float </p><p>​    他们之间用“==”，比较的是他们的值</p><p>2, 引用类型（类，接口，数组）</p><p>​    使用“==”进行比较的时候，比较的是内存地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       String str1 = <span class="keyword">new</span> String(<span class="string">"str"</span>);</span><br><span class="line">       String str2 = <span class="keyword">new</span> String(<span class="string">"str"</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"str1==str2:"</span> + (str1 == str2));</span><br><span class="line"></span><br><span class="line">       String str3=<span class="string">"str"</span>;</span><br><span class="line">       String str4=<span class="string">"str"</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(str3 == str4);</span><br><span class="line">       System.out.println(System.identityHashCode(str1));</span><br><span class="line">       System.out.println(System.identityHashCode(str2));</span><br><span class="line">       System.out.println(System.identityHashCode(str3));</span><br><span class="line">       System.out.println(System.identityHashCode(str4));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果为</p><p>str1==str2:false<br>true<br>32324749<br>31115012<br>3633860<br>3633860</p><p>  对象是放在堆中的，栈中存放的是对象的引用（地址）。由此可见’==’是对栈中的值进行比较的。如果要比较堆   中对象的内容是否相同，那么就要重写equals方法了。 </p><p> 但是这行代码，128！=128，a!=b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer a1 = <span class="number">127</span>;</span><br><span class="line">Integer b1 = <span class="number">127</span>;</span><br><span class="line">Integer a = <span class="number">128</span>;</span><br><span class="line">Integer b = <span class="number">128</span>;</span><br><span class="line">System.out.println(a1==b1);</span><br><span class="line">System.out.println(a==b);</span><br></pre></td></tr></table></figure><p>结果 true false</p><p>去看Integer的源码可以明白，是这段源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         high = h;</span><br><span class="line"></span><br><span class="line">             cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">             <span class="keyword">int</span> j = low;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">             <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">             <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Integer对于 对于-128到127之间的数，会进行缓存 。</p><h3 id="2，equals"><a href="#2，equals" class="headerlink" title="2，equals()"></a>2，equals()</h3><p> 1,默认没有重新的情况下，都调用的是Objects 的equals（）的方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);&#125;</span><br></pre></td></tr></table></figure><p>​    可以看到是Objects中的equal（）方法和== 是等同的。</p><p>2，日常的代码中会覆盖equal() 方法，下面是string 类 重写的equal（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    逻辑很明显：</p><ul><li>​    内存地址相同，直接返回true</li><li>​    比较对象是String类型，直接返回false</li><li>​    a和b长度不同，直接返回false</li><li>​    逐个字符比较，有不同就返回false</li></ul><h4 id="equal重写注意的五个原则"><a href="#equal重写注意的五个原则" class="headerlink" title="equal重写注意的五个原则"></a>equal重写注意的五个原则</h4><p>​    1  自反性：对任意引用值X，x.equals(x)的返回值一定为true.<br>​    2  对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true;<br>​    3  传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true<br>​    4  一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变<br>​    5  非空性：任何非空的引用值X，x.equals(null)的返回值一定为false  </p><h3 id="3，hashCode"><a href="#3，hashCode" class="headerlink" title="3，hashCode"></a>3，hashCode</h3><p>Objects给出的hashCode（）的原生代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>返回时的一个int 类型的数值。</p><p>下面是引用摘抄的</p><p>=======================================================================================</p><p> hashCode()方法返回的就是一个数值，从方法的名称上就可以看出，其目的是生成一个hash码。hash码的主要用途就是在对对象进行散列的时候作为key输入，据此很容易推断出，我们需要每个对象的hash码尽可能不同，这样才能保证散列的存取性能。事实上，Object类提供的默认实现确实保证每个对象的hash码不同（在对象的内存地址基础上经过特定算法返回一个hash码）。Java采用了哈希表的原理。哈希（Hash）实际上是个人名，由于他提出一哈希算法的概念，所以就以他的名字命名了。 哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。   </p><p> 散列函数,散列算法,哈希函数。<br>是一种从任何一种数据中创建小的数字“指纹”的方法。<br>散列函数将任意长度的二进制值映射为较短的固定长度的二进制值，这个小的二进制值称为哈希值。<br>好的散列函数在输入域中很少出现散列冲突。 </p><p>======================================================================================</p><h5 id="hashCode的作用"><a href="#hashCode的作用" class="headerlink" title="hashCode的作用"></a>hashCode的作用</h5><p>想要明白，必须要先知道Java中的集合。　　<br>总的来说，Java中的集合（Collection）有两类，一类是List，再有一类是Set。前者集合内的元素是有序的，元素可以重复；后者元素无序，但元素不可重复。</p><p>那么这里就有一个比较严重的问题了：要想保证元素不重复，可两个元素是否重复应该依据什么来判断呢？ </p><p>这就是Object.equals方法了。但是，如果每增加一个元素就检查一次，那么当元素很多时，后添加到集合中的元素比较的次数就非常多了。也就是说，如果集合中现在已经有1000个元素，那么第1001个元素加入集合时，它就要调用1000次equals方法。这显然会大大降低效率。<br>于是，Java采用了哈希表的原理。 </p><p>这样一来，当集合要添加新的元素时，</p><p>先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。 </p><p>如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；</p><p>如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存，不相同就散列其它的地址。所以这里存在一个冲突解决的问题。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。</p><h3 id="4、eqauls方法和hashCode方法关系"><a href="#4、eqauls方法和hashCode方法关系" class="headerlink" title="4、eqauls方法和hashCode方法关系"></a><strong>4、eqauls方法和hashCode方法关系</strong></h3><p>Java对于eqauls方法和hashCode方法是这样规定的： </p><p>(1)同一对象上多次调用hashCode()方法，总是返回相同的整型值。</p><p>(2)如果a.equals(b)，则一定有a.hashCode() 一定等于 b.hashCode()。<br>(3)如果!a.equals(b)，则a.hashCode() 不一定等于 b.hashCode()。此时如果a.hashCode() 总是不等于 b.hashCode()，会提高hashtables的性能。</p><p>(4)a.hashCode()==b.hashCode() 则 a.equals(b)可真可假</p><p>(5)a.hashCode()！= b.hashCode() 则 a.equals(b)为假。 </p><p>上面结论简记：</p><p>1、如果两个对象equals，Java运行时环境会认为他们的hashcode一定相等。<br>2、如果两个对象不equals，他们的hashcode有可能相等。<br>3、如果两个对象hashcode相等，他们不一定equals。<br>4、如果两个对象hashcode不相等，他们一定不equals。</p><h5 id="关于这两个方法的重要规范："><a href="#关于这两个方法的重要规范：" class="headerlink" title="关于这两个方法的重要规范："></a>关于这两个方法的重要规范：</h5><p>规范1：若重写equals(Object obj)方法，有必要重写hashcode()方法，确保通过equals(Object obj)方法判断结果为true的两个对象具备相等的hashcode()返回值。说得简单点就是：“如果两个对象相同，那么他们的hashcode应该相等”。不过请注意：这个只是规范，如果你非要写一个类让equals(Object obj)返回true而hashcode()返回两个不相等的值，编译和运行都是不会报错的。不过这样违反了Java规范，程序也就埋下了BUG。 </p><p>规范2：如果equals(Object obj)返回false，即两个对象“不相同”，并不要求对这两个对象调用hashcode()方法得到两个不相同的数。说的简单点就是：“如果两个对象不相同，他们的hashcode可能相同”。</p><h3 id="5、为什么覆盖equals时总要覆盖hashCode"><a href="#5、为什么覆盖equals时总要覆盖hashCode" class="headerlink" title="5、为什么覆盖equals时总要覆盖hashCode"></a>5、为什么覆盖equals时总要覆盖hashCode</h3><p> 一个很常见的错误根源在于没有覆盖hashCode方法。在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable。</p><p>1.在应用程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法都必须始终如一地返回同一个整数。在同一个应用程序的多次执行过程中，每次执行所返回的整数可以不一致。</p><p>2.如果两个对象根据equals()方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。</p><p>3.如果两个对象根据equals()方法比较是不相等的，那么调用这两个对象中任意一个对象的hashCode方法，则不一定要产生相同的整数结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提高散列表的性能。</p><h3 id="6、总结："><a href="#6、总结：" class="headerlink" title="6、总结："></a>6、总结：</h3><p>1、equals方法用于比较对象的内容是否相等（覆盖以后）</p><p>2、hashcode方法只有在集合中用到</p><p>3、当覆盖了equals方法时，比较对象是否相等将通过覆盖后的equals方法进行比较（判断对象的内容是否相等）。</p><p>4、将对象放入到集合中时，首先判断要放入对象的hashcode值与集合中的任意一个元素的hashcode值是否相等，如果不相等直接将该对象放入集合中。如果hashcode值相等，然后再通过equals方法判断要放入对象与集合中的任意一个对象是否相等，如果equals判断不相等，直接将该元素放入到集合中，否则不放入。</p><p>以上从第四点以后转载至博客：<a href="https://blog.csdn.net/hla199106/article/details/46907725" target="_blank" rel="noopener">https://blog.csdn.net/hla199106/article/details/46907725</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java中-和equals和hashCode的区别&quot;&gt;&lt;a href=&quot;#Java中-和equals和hashCode的区别&quot; class=&quot;headerlink&quot; title=&quot;Java中==和equals和hashCode的区别&quot;&gt;&lt;/a&gt;Java中==和eq
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>写于博客之始</title>
    <link href="https://liudong-code.github.io/2020/02/26/%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%A7%8B/"/>
    <id>https://liudong-code.github.io/2020/02/26/%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%A7%8B/</id>
    <published>2020-02-26T10:00:08.000Z</published>
    <updated>2020-02-27T07:36:23.335Z</updated>
    
    <content type="html"><![CDATA[<p>​        重新整理了之前的旧的博客，发现有部分博客有老东家的Code，想起来之前有同事因无意中泄露了公司的淘宝三段码，而受到处罚，索性就新搞了一个新的博客 地址，这几天正好因为疫情在家里面，找工作也不是很好找，就把之前的整理的东西全部搞过来。新的博客只弄了主题，其他的细节都还没整，想的是尽快的把日常干货先给弄上来。嗯，就这些吧！</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        重新整理了之前的旧的博客，发现有部分博客有老东家的Code，想起来之前有同事因无意中泄露了公司的淘宝三段码，而受到处罚，索性就新搞了一个新的博客 地址，这几天正好因为疫情在家里面，找工作也不是很好找，就把之前的整理的东西全部搞过来。新的博客只弄了主题，其他
      
    
    </summary>
    
    
    
      <category term="日常随笔" scheme="https://liudong-code.github.io/tags/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
