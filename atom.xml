<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code</title>
  
  <subtitle>码总</subtitle>
  <link href="/liudong-code.github.io/atom.xml" rel="self"/>
  
  <link href="https://liudong-code.github.io/"/>
  <updated>2020-02-28T11:36:18.863Z</updated>
  <id>https://liudong-code.github.io/</id>
  
  <author>
    <name>Liu Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IO多路复用技术以及epoll实现原理</title>
    <link href="https://liudong-code.github.io/2020/02/28/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF%E4%BB%A5%E5%8F%8Aepoll%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://liudong-code.github.io/2020/02/28/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF%E4%BB%A5%E5%8F%8Aepoll%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2020-02-28T10:57:13.000Z</published>
    <updated>2020-02-28T11:36:18.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么Redis中要使用I-O多路复用呢？"><a href="#为什么Redis中要使用I-O多路复用呢？" class="headerlink" title="为什么Redis中要使用I/O多路复用呢？"></a>为什么Redis中要使用I/O多路复用呢？</h3><p>​        redis 是一个单线程却性能非常好的内存数据库， 主要用来作为缓存系统。</p><p>​        redis 采用网络IO多路复用技来保证在多连接的时候， 系统的高吞吐量。</p><p>​        Redis 是跑在单线程中的，所有的操作都是按照顺序线性执行的，但是由于读写操作等待用户输入或输出都是阻塞的，所以 I/O 操作在一般情况下往往不能直接返回，这会导致某一文件的 I/O 阻塞导致整个进程无法对其它客户提供服务，而 I/O 多路复用就是为了解决这个问题而出现的.</p><p>​        select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪，能够通知程序进行相应的操作。<br>​        redis的io模型主要是基于epoll实现的，不过它也提供了 select和kqueue的实现，默认采用epoll。</p><h3 id="epoll实现机制"><a href="#epoll实现机制" class="headerlink" title="epoll实现机制"></a>epoll实现机制</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设想一下如下场景：</span><br><span class="line">有<span class="number">100</span>万个客户端同时与一个服务器进程保持着TCP连接。而每一时刻，通常只有几百上千个TCP连接是活跃的</span><br><span class="line">(事实上大部分场景都是这种情况)。如何实现这样的高并发？</span><br></pre></td></tr></table></figure><p>​        select/poll是，服务器进程每次都把这100万个连接告诉操作系统(从用户态复制句柄数据结构到内态)，让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll一般只能处理几千的并发连接。</p><p>​        如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。</p><h4 id="总结：select和poll的缺点如下："><a href="#总结：select和poll的缺点如下：" class="headerlink" title="总结：select和poll的缺点如下："></a>总结：select和poll的缺点如下：</h4><ol><li>每次调用select/poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</li><li>同时每次调用select/poll都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</li><li>针对select支持的文件描述符数量太小了，默认是1024</li><li>select返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件；</li><li>select的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行IO操作，那么之后每次select调用还是会将这些文件描述符通知进程。</li><li>相比select模型，poll使用链表保存文件描述符，因此没有了监视文件数量的限制，但其他三个缺点依然存在。</li></ol><p>​        epoll的设计和实现与select完全不同。epoll是poll的一种优化，返回后不需要对所有的fd进行遍历，在内核中维持了fd的列表。select和poll是将这个内核列表维持在用户态，然后传递到内核中。与poll/select不同，epoll不再是一个单独的系统调用，而是由epoll_create/epoll_ctl/epoll_wait三个系统调用组成，后面将会看到这样做的好处。epoll在2.6以后的内核才支持。</p><p>​        epoll通过在Linux内核中申请一个简易的文件系统(文件系统一般用什么数据结构实现？B+树)。把原先select/poll调用分成了3个部分：</p><p>1）调用epoll_create()建立一个epoll对象(在epoll文件系统中为这个句柄对象分配资源)</p><p>2）调用epoll_ctl向epoll对象中添加这100万个连接的套接字</p><p>3）调用epoll_wait收集发生的事件的连接</p><p>​        如此一来，要实现上面说是的场景，只需要在进程启动时建立一个epoll对象，然后在需要的时候向这个epoll对象中添加或者删除连接。同时，epoll_wait的效率也非常高，因为调用epoll_wait时，并没有一股脑的向操作系统复制这100万个连接的句柄数据，内核也不需要去遍历全部的连接。</p><h4 id="总结：epoll的优点"><a href="#总结：epoll的优点" class="headerlink" title="总结：epoll的优点"></a>总结：epoll的优点</h4><ol><li>epoll 没有最大并发连接的限制，上限是最大可以打开文件的数目，这个数字一般远大于 2048, <strong>一般来说这个数目和系统内存关系很大</strong> ，具体数目可以 cat /proc/sys/fs/file-max 察看。</li><li>效率提升， epoll 最大的优点就在于它<strong>只管你“活跃”的连接</strong> ，而跟连接总数无关，因此在实际的网络环境中， epoll 的效率就会远远高于 select 和 poll 。</li><li>内存拷贝， epoll 在这点上使用了“共享内存”，这个内存拷贝也省略了</li></ol><h3 id="redis-epoll底层实现"><a href="#redis-epoll底层实现" class="headerlink" title="redis epoll底层实现"></a>redis epoll底层实现</h3><p>​        当某一进程调用epoll_create方法时，Linux内核会创建一个eventpoll结构体，这个结构体中有两个成员与epoll的使用方式密切相关</p><p><strong>eventpoll结构体如下所示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct eventpoll｛</span><br><span class="line">.....</span><br><span class="line"><span class="comment">/*红黑树节点的根，存储着所有添加到epoll中的需要监控的事件*/</span></span><br><span class="line">struct rb_root  rbt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*双链表中储存着将要通过epoll_wait返回给用户满足条件的事件*/</span></span><br><span class="line">struct list_head  rdlist;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>​        每一个epoll对象都有一个独立的eventpoll结构体，用于存放通过epoll_ctl方法向epoll对象中添加进来的事<br>件。这些事件都会挂载在红黑树中，如此，重复添加的事件就可以通过红黑树而高效的识别出来(红黑树的插入时间效率是lgn，其中n为树的高度)。</p><p>​        而所有添加到epoll中的事件都会与设备(网卡)驱动程序建立回调关系，也就是说，当相应的事件发生时会调用这个回调方法。这个回调方法在内核中叫ep_poll_callback,它会将发生的事件添加到rdlist双链表中。</p><p>​        在epoll中，对于每一个事件，都会建立一个epitem结构体，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rbn</span>;</span><span class="comment">//红黑树节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">rdllink</span>;</span><span class="comment">//双向链表节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_filedfd</span> <span class="title">ffd</span>;</span><span class="comment">//句柄事件信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> ;</span><span class="comment">// 指向其所属的eventpoll对象</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>;</span><span class="comment">//期待发生的事件类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        当调用epoll_wait检查是否有事件发生时，只需要检查eventpoll对象中的rdlist双链表中是否有epitem元素即可。如果rdlist不为空，则把发生的事件复制到用户态，同时将事件数量返回给用户</p><h4 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h4><ol><li>不用重复传递。我们调用epoll_wait时就相当于以往调用select/poll，但是这时却不用传递socket句柄给内核，因为内核已经在epoll_ctl中拿到了要监控的句柄列表。</li><li>在内核里，一切皆文件。所以，epoll向内核注册了一个文件系统，用于存储上述的被监控socket。当你调用epoll_create时，就会在这个虚拟的epoll文件系统里创建一个file结点。当然这个file不是普通文件，它只服务于epoll。<br>epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket，这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</li><li>极其高效的原因：<br>这是由于我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里<br>建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。</li></ol><h4 id="这个准备就绪list链表是怎么维护的呢？"><a href="#这个准备就绪list链表是怎么维护的呢？" class="headerlink" title="这个准备就绪list链表是怎么维护的呢？"></a>这个准备就绪list链表是怎么维护的呢？</h4><p>​        当我们执行epoll_ctl时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个<br>socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。（注：好好理解这句话！）</p><p>​        从上面这句可以看出，epoll的基础就是回调呀！</p><p>​        如此，一颗红黑树，一张准备就绪句柄链表，少量的内核cache，就帮我们解决了大并发下的socket处理问题。执行epoll_create时，创建了红黑树和就绪链表，执行epoll_ctl时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪链表中插入数据。执行epoll_wait时立刻返回准备就绪链表里的数据即可。</p><p>​        最后看看epoll独有的两种模式LT和ET。无论是LT和ET模式，都适用于以上所说的流程。区别是，LT模式下，只要一个句柄上的事件一次没有处理完，会在以后调用epoll_wait时次次返回这个句柄，而ET模式仅在第一次返回。关于LT，ET，有一端描述，LT和ET都是电子里面的术语，ET是边缘触发，LT是水平触发，一个表示只有在变化的边际触发，一个表示在某个阶段都会触发。</p><p>​        LT, ET这件事怎么做到的呢？当一个socket句柄上有事件时，内核会把该句柄插入上面所说的准备就绪list链表，这时我们调用epoll_wait，会把准备就绪的socket拷贝到用户态内存，然后清空准备就绪list链表，最后，epoll_wait干了件事，就是检查这些socket，如果不是ET模式（就是LT模式的句柄了），并且这些socket上确实有未处理的事件时，又把该句柄放回到刚刚清空的准备就绪链表了。所以，非ET的句柄，只要它上面还有事件，<br>epoll_wait每次都会返回这个句柄。（从上面这段，可以看出，LT还有个回放的过程，低效了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么Redis中要使用I-O多路复用呢？&quot;&gt;&lt;a href=&quot;#为什么Redis中要使用I-O多路复用呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么Redis中要使用I/O多路复用呢？&quot;&gt;&lt;/a&gt;为什么Redis中要使用I/O多路复用呢？&lt;/
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="Redis相关" scheme="https://liudong-code.github.io/tags/Redis%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>常见的IO模型</title>
    <link href="https://liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/"/>
    <id>https://liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-02-28T09:35:29.000Z</published>
    <updated>2020-02-28T10:51:20.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高性能IO模型，常见的有四种："><a href="#高性能IO模型，常见的有四种：" class="headerlink" title="高性能IO模型，常见的有四种："></a>高性能IO模型，常见的有四种：</h3><p>（1）同步阻塞IO（Blocking IO）：即传统的IO模型。</p><p>（2）同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为</p><p>NONBLOCK。注意这里所说的NIO并非Java的NIO（New IO）库。</p><p>（3）IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Java中的Selector和</p><p>Linux中的epoll都是这种模型。</p><p>（4）异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。</p><h3 id="IO模型举例理解1"><a href="#IO模型举例理解1" class="headerlink" title="IO模型举例理解1"></a>IO模型举例理解1</h3><ol><li><p>阻塞IO, 给女神发一条短信, 说我来找你了, 然后就默默的一直等着女神下楼, 这个期间除了等待你不<br> 会做其他事情, 属于备胎做法.</p></li><li><p>非阻塞IO, 给女神发短信, 如果不回, 接着再发, 一直发到女神下楼, 这个期间你除了发短信等待不会<br> 做其他事情, 属于专一做法.</p></li><li><p>IO多路复用, 是找一个宿管大妈来帮你监视下楼的女生, 这个期间你可以些其他的事情. 例如可以顺便<br>看看其他妹子,玩玩王者荣耀, 上个厕所等等. IO复用又包括 select, poll, epoll 模式. 那么它们的区别是什么? 3.1 select大妈 每一个女生下楼, select大妈都不知道这个是不是你的女神, 她需要一个一个询问, 并且select大妈能力还有限, 最多一次帮你监视1024个妹子 </p></li></ol><p>3.2 poll大妈不限制盯着女生的数量, 只要是经过宿舍楼门口的女生, 都会帮你去问是不是你女神</p><p>3.3 epoll大妈不限制盯着女生的数量, 并且也不需要一个一个去问. 那么如何做呢? epoll大妈会为每个进宿舍楼的女生脸上贴上一个大字条,上面写上女生自己的名字, 只要女生下楼了, epoll大妈就知道这个是不是你女神了, 然后大妈再通知你.上面这些同步IO有一个共同点就是, 当女神走出宿舍门口的时候, 你已经站在宿舍门口等着女神的, 此时你属于同步等待状态</p><ol start="4"><li>接下来是异步IO的情况 你告诉女神我来了, 然后你就去王者荣耀了, 一直到女神下楼了, 发现找不见你了,女神再给你打电话通知你, 说我下楼了, 你在哪呢? 这时候你才来到宿舍门口. 此时属于逆袭做法</li></ol><h3 id="IO模型举例理解2"><a href="#IO模型举例理解2" class="headerlink" title="IO模型举例理解2"></a>IO模型举例理解2</h3><p>1.阻塞I/O模型 老李去火车站买票，排队三天买到一张退票。 耗费：在车站吃喝拉撒睡 3天，其他事一件没干。</p><p>2.非阻塞I/O模型 老李去火车站买票，隔12小时去火车站问有没有退票，三天后买到一张票。耗费：往返车站6次，路上6小时，其他时间做了好多事。</p><p>3.I/O复用模型</p><ul><li>select/poll 老李去火车站买票，委托黄牛，然后每隔6小时电话黄牛询问，黄牛三天内买到票，然后老李去火车站交钱领票。 耗费：往返车站2次，路上2小时，黄牛手续费100元，打电话17次</li><li>epoll 老李去火车站买票，委托黄牛，黄牛买到后即通知老李去领，然后老李去火车站交钱领票。 耗费：往返车站2次，路上2小时，黄牛手续费100元，无需打电话</li></ul><p>4.信号驱动I/O模型 老李去火车站买票，给售票员留下电话，有票后，售票员电话通知老李，然后老李去火车站交钱领票。 耗费：往返车站2次，路上2小时，免黄牛费100元，无需打电话</p><p>5.异步I/O模型 老李去火车站买票，给售票员留下电话，有票后，售票员电话通知老李并快递送票上门。 耗费：往返车站1次，路上1小时，免黄牛费100元，无需打电话</p><h3 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h3><p>​        同步阻塞IO模型是最简单的IO模型，用户线程在内核进行IO操作时被阻塞。</p><p><img src="/liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/%E4%B8%80%E8%88%ACIO.png" alt></p><ol><li>等待数据就绪（读就绪、写就绪）；</li><li>将数据从内核中拷贝到JVM进程中；</li><li>处理数据。</li></ol><p>​        <strong>整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够</strong></p><h3 id="同步非阻塞IO"><a href="#同步非阻塞IO" class="headerlink" title="同步非阻塞IO"></a>同步非阻塞IO</h3><p><img src="/liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/%E9%9D%9E%E9%98%BB%E5%A1%9EIO.png" alt></p><p>​        由于socket是非阻塞的方式，因此用户线程发起IO请求时立即返回。但并未读取到任何数据，用户线程<br>需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。</p><p>伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">read</span>(socket, <span class="built_in">buffer</span>) != SUCCESS);</span><br><span class="line"><span class="built_in">process</span>(<span class="built_in">buffer</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        即用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。整个IO请的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。</p><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p>​        IO多路复用模型是建立在内核提供的多路分离函数select基础之上的，使用select函数可以避免同步非阻塞IO模型中轮询等待的问题。</p><p><img src="/liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png" alt></p><p><img src="/liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A82.png" alt></p><p>​         用户首先将需要进行IO操作的socket添加到select中，然后阻塞等待select系统调用返回。当数据到达时，socket被激活，select函数返回。用户线程正式发起read请求，读取数据并继续执行。 </p><p>​        从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。</p><p>​        但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。</p><p>​        用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在同一个线程内同时处理多个IO请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p><p>用户线程使用IO多路复用模型的伪代码描述为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> UserEventHandler::handle_event() &#123;</span><br><span class="line">    <span class="keyword">if</span>(can_read(socket)) &#123;</span><br><span class="line">read(socket, buffer);</span><br><span class="line">        process(buffer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">Reactor.register(<span class="keyword">new</span> UserEventHandler(socket));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​         用户需要重写EventHandler的handle_event函数进行读取数据、处理数据的工作，用户线程只需要将自己的<br>EventHandler注册到Reactor即可。Reactor中handle_events事件循环的伪代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Reactor::handle_events() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">sockets = select();</span><br><span class="line"><span class="keyword">for</span>(socket in sockets) &#123;</span><br><span class="line">get_event_handler(socket).handle_event();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        事件循环不断地调用select获取被激活的socket，然后根据获取socket对应的EventHandler，执行器<br>handle_event函数即可。<br>​        IO多路复用是最常使用的IO模型，但是其异步程度还不够“彻底”，因为它使用了会阻塞线程的select系统调用。因此IO多路复用只能称为异步阻塞IO，而非真正的异步IO。</p><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p>​        “真正”的异步IO需要操作系统更强的支持。在IO多路复用模型中，事件循环将文件句柄的状态事件通知给用户线程，由用户线程自行读取数据、处理数据。而在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕，并放在了用户线程指定的缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p><p><strong>异步IO模型使用了Proactor设计模式实现了这一机制。</strong></p><p><img src="/liudong-code.github.io/2020/02/28/%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B/%E5%BC%82%E6%AD%A5IO.png" alt></p><p>异步IO模型中，</p><ul><li>用户线程直接使用内核提供的异步IO API发起read请求，且发起后立即返回，继续执行用户线程代码。不过此时用户线程已经将调用的AsynchronousOperation和CompletionHandler注册到内核，</li><li>然后操作系统开启独立的内核线程去处理IO操作。当read请求的数据到达时，由内核负责读取socket中的数据，并写入用户指定的缓冲区中。</li><li>最后内核将read的数据和用户线程注册的CompletionHandler分发给内部Proactor，Proactor将IO完成的信息通知给用户线程（一般通过调用用户线程注册的完成事件处理函数），完成异步IO。</li></ul><p>用户线程使用异步IO模型的伪代码描述为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UserCompletionHandler::handle_event</span><span class="params">(<span class="built_in">buffer</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">process</span>(<span class="built_in">buffer</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">aio_read(socket, <span class="keyword">new</span> UserCompletionHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户需要重写CompletionHandler的handle_event函数进行处理数据的工作，参数buffer表示Proactor已经准备好的数据，用户线程直接调用内核提供的异步IO API，并将重写的CompletionHandler注册即可。</p><p>相比于IO多路复用模型，异步IO并不十分常用，不少高性能并发服务程序使用IO多路复用模型+多线程任务处理的架构基本可以满足需求。况且目前操作系统对异步IO的支持并非特别完善，更多的是采用IO多路复用模型模拟异步IO的方式（IO事件触发时不直接通知用户线程，而是将数据读写完毕后放到用户指定的缓冲区中）。Java7之后已经支持了异步IO，感兴趣的读者可以尝试使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高性能IO模型，常见的有四种：&quot;&gt;&lt;a href=&quot;#高性能IO模型，常见的有四种：&quot; class=&quot;headerlink&quot; title=&quot;高性能IO模型，常见的有四种：&quot;&gt;&lt;/a&gt;高性能IO模型，常见的有四种：&lt;/h3&gt;&lt;p&gt;（1）同步阻塞IO（Blocking
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>IO设计模式之Reactor和Proactor</title>
    <link href="https://liudong-code.github.io/2020/02/28/IO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BReactor%E5%92%8CProactor/"/>
    <id>https://liudong-code.github.io/2020/02/28/IO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BReactor%E5%92%8CProactor/</id>
    <published>2020-02-28T08:49:31.000Z</published>
    <updated>2020-02-28T09:45:04.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反应器Reactor"><a href="#反应器Reactor" class="headerlink" title="反应器Reactor"></a>反应器Reactor</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    <strong>反应器设计模式(Reactor pattern)是一种为处理并发服务请求，并将请求提交到一个或者多个服务处理程序的</strong></p><p><strong>事件设计模式。当客户端请求抵达后，服务处理程序使用多路分配策略，由一个非阻塞的线程来接收所有的请求，</strong></p><p><strong>然后派发这些请求至相关的工作线程进行处理。</strong></p><h3 id="Reactor模式主要包含下面几部分内容："><a href="#Reactor模式主要包含下面几部分内容：" class="headerlink" title="Reactor模式主要包含下面几部分内容："></a>Reactor模式主要包含下面几部分内容：</h3><ul><li>初始事件分发器(Initialization Dispatcher)：用于管理Event Handler，定义注册、移除EventHandler等。它还作为Reactor模式的入口调用Synchronous Event Demultiplexer的select方法以阻塞等待事件返回，当阻塞等待返回时，根据事件发生的Handle将其分发给对应的Event Handler处理，即回调EventHandler中handle_event(方法</li><li>同步（多路）事件分离器(Synchronous Event Demultiplexer)：无限循环等待新事件的到来，一旦发现有新的事件到来，就会通知初始事件分发器去调取特定的事件处理器。</li><li>系统处理程序(Handles)：操作系统中的句柄，是对资源在操作系统层面上的一种抽象，它可以是打开的文件、一个连接(Socket)、Timer等。由于Reactor模式一般使用在网络编程中，因而这里一般指SocketHandle，即一个网络连接（Connection，在Java NIO中的Channel）。这个Channel注册到SynchronousEvent Demultiplexer中，以监听Handle中发生的事件，对ServerSocketChannnel可以是CONNECT事件，对SocketChannel可以是READ、WRITE、CLOSE事件等。</li><li>事件处理器(Event Handler)： 定义事件处理方法，以供Initialization Dispatcher回调使用。</li></ul><h3 id="为什么使用Reactor模式"><a href="#为什么使用Reactor模式" class="headerlink" title="为什么使用Reactor模式"></a>为什么使用Reactor模式</h3><p>​        <strong>并发系统常使用reactor模式代替常用的多线程的处理方式，节省系统的资源，提高系统的吞吐量</strong>。 例如：在高并发的情况下，既可以使用多处理处理方式，也可以使用Reactor处理方式。</p><h4 id="多线程的处理："><a href="#多线程的处理：" class="headerlink" title="多线程的处理："></a>多线程的处理：</h4><p>​        为每个单独到来的请求，专门启动一条线程，这样的话造成系统的开销很大，并且在单核的机上，多线程并不能提高系统的性能，除非在有一些阻塞的情况发生。否则线程切换的开销会使处理的速度变慢。</p><h4 id="Reactor模式的处理："><a href="#Reactor模式的处理：" class="headerlink" title="Reactor模式的处理："></a>Reactor模式的处理：</h4><p>​        服务器端启动一条单线程，用于轮询IO操作是否就绪，当有就绪的才进行相应的读写操作，这样的话就减少了服务器产生大量的线程，也不会出现线程之间的切换产生的性能消耗。(目前JAVA的NIO就采用的此种模式，这里引申出一个问题：在多核情况下NIO的扩展问题)</p><p>​        <strong>以上两种处理方式都是基于同步的，多线程的处理是我们传统模式下对高并发的处理方式，Reactor模式的处理是现今面对高并发和高性能一种主流的处理方式。</strong></p><h3 id="Reactor模式结构"><a href="#Reactor模式结构" class="headerlink" title="Reactor模式结构"></a>Reactor模式结构</h3><p><img src="/liudong-code.github.io/2020/02/28/IO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BReactor%E5%92%8CProactor/Reactor.png" alt></p><h4 id="Reactor包含如下角色："><a href="#Reactor包含如下角色：" class="headerlink" title="Reactor包含如下角色："></a>Reactor包含如下角色：</h4><ul><li>Handle 句柄；用来标识socket连接或是打开文件；</li><li>Synchronous Event Demultiplexer：同步事件多路分解器：由操作系统内核实现的一个函数；用于阻塞等待发生在句柄集合上的一个或多个事件；（如select/epoll；）</li><li>Event Handler：事件处理接口</li><li>Concrete Event HandlerA：实现应用程序所提供的特定事件处理逻辑；</li><li>Reactor：反应器，定义一个接口，实现以下功能： 1）供应用程序注册和删除关注的事件句柄； 2）运行事件循环； 3）有就绪事件到来时，分发事件到之前注册的回调函数上处理；</li><li>Initiation Dispatcher：用于管理Event Handler，即EventHandler的容器，用以注册、移除EventHandler等；另外，它还作为Reactor模式的入口调用Synchronous Event Demultiplexer的select方法以阻塞等待事件返回，当阻塞等待返回时，根据事件发生的Handle将其分发给对应的Event Handler处理，即回调EventHandler中的handle_event()方法</li></ul><p><img src="/liudong-code.github.io/2020/02/28/IO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BReactor%E5%92%8CProactor/Reactor2.png" alt></p><ol><li>应用启动，将关注的事件handle注册到Reactor中；</li><li>调用Reactor，进入无限事件循环，等待注册的事件到来；</li><li>事件到来，select返回，Reactor将事件分发到之前注册的回调函数中处理；</li></ol><h2 id="Proactor模式"><a href="#Proactor模式" class="headerlink" title="Proactor模式"></a>Proactor模式</h2><p>​        <strong>运用于异步I/O操作，Proactor模式中，应用程序不需要进行实际的读写过程，它只需要从缓存区读取或者写入即可，操作系统会读取缓存区或者写入缓存区到真正的IO设备.</strong><br>​        <strong>Proactor中写入操作和读取操作，只不过感兴趣的事件是写入完成事件。</strong></p><h3 id="Proactor模式结构"><a href="#Proactor模式结构" class="headerlink" title="Proactor模式结构"></a>Proactor模式结构</h3><p><img src="/liudong-code.github.io/2020/02/28/IO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BReactor%E5%92%8CProactor/Proactor.png" alt></p><h3 id="Proactor主动器模式包含如下角色"><a href="#Proactor主动器模式包含如下角色" class="headerlink" title="Proactor主动器模式包含如下角色"></a>Proactor主动器模式包含如下角色</h3><ul><li>Handle 句柄；用来标识socket连接或是打开文件；</li><li>Asynchronous Operation Processor：异步操作处理器；负责执行异步操作，一般由操作系统内核实现；</li><li>Asynchronous Operation：异步操作</li><li>Completion Event Queue：完成事件队列；异步操作完成的结果放到队列中等待后续使用</li><li>Proactor：主动器；为应用程序进程提供事件循环；从完成事件队列中取出异步操作的结果，分发调用相应的<br>后续处理逻辑；</li><li>Completion Handler：完成事件接口；一般是由回调函数组成的接口；</li><li>Concrete Completion Handler：完成事件处理逻辑；实现接口定义特定的应用处理逻辑；</li></ul><h3 id="业务流程及时序图"><a href="#业务流程及时序图" class="headerlink" title="业务流程及时序图"></a>业务流程及时序图</h3><p><img src="/liudong-code.github.io/2020/02/28/IO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BReactor%E5%92%8CProactor/Proactor2.png" alt></p><ol><li>应用程序启动，调用异步操作处理器提供的异步操作接口函数，调用之后应用程序和异步操作处理就独立运行；应用程序可以调用新的异步操作，而其它操作可以并发进行；</li><li>应用程序启动Proactor主动器，进行无限的事件循环，等待完成事件到来；</li><li>异步操作处理器执行异步操作，完成后将结果放入到完成事件队列；</li><li>主动器从完成事件队列中取出结果，分发到相应的完成事件回调函数处理逻辑中；</li></ol><h2 id="对比两者的区别"><a href="#对比两者的区别" class="headerlink" title="对比两者的区别"></a>对比两者的区别</h2><h3 id="主动和被动"><a href="#主动和被动" class="headerlink" title="主动和被动"></a>主动和被动</h3><p>以主动写为例：</p><ul><li><p>Reactor将handle放到select()，等待可写就绪，然后调用write()写入数据；写完处理后续逻辑；</p></li><li><p>Proactor调用aoi_write后立刻返回，由内核负责写操作，写完后调用相应的回调函数处理后续逻辑；</p><p>可以看出，Reactor被动的等待指示事件的到来并做出反应；它有一个等待的过程，做什么都要先放入到监听事件集合中等待handler可用时再进行操作；<br>Proactor直接调用异步读写操作，调用完后立刻返回； </p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Reactor实现了一个被动的事件分离和分发模型，服务等待请求事件的到来，再通过不受间断的同步处理事件，从而做出反应；</p><p>Proactor实现了一个主动的事件分离和分发模型；这种设计允许多个任务并发的执行，从而提高吞吐量；并可执行耗时长的任务（各个任务间互不影响）</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>Reactor实现相对简单，对于耗时短的处理场景处理高效；<br>操作系统可以在多个事件源上等待，并且避免了多线程编程相关的性能开销和编程复杂性；<br>事件的串行化对应用是透明的，可以顺序的同步执行而不需要加锁；<br>事务分离：将与应用无关的多路分解和分配机制和与应用相关的回调函数分离开来，</p><p>Proactor性能更高，能够处理耗时长的并发场景；</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>Reactor处理耗时长的操作会造成事件分发的阻塞，影响到后续事件的处理；</p><p>Proactor实现逻辑复杂；依赖操作系统对异步的支持，目前实现了纯异步操作的操作系统少，实现优秀的如windows IOCP，但由于其windows系统用于服务器的局限性，目前应用范围较小；而Unix/Linux系统对纯异步的支持有限，应用事件驱动的主流还是通过select/epoll来实现；</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>Reactor：同时接收多个服务请求，并且依次同步的处理它们的事件驱动程序；<br>Proactor：异步接收和同时处理多个服务请求的事件驱动程序；</p><p>开源产品如Redis、ACE，事件模型都使用的Reactor模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反应器Reactor&quot;&gt;&lt;a href=&quot;#反应器Reactor&quot; class=&quot;headerlink&quot; title=&quot;反应器Reactor&quot;&gt;&lt;/a&gt;反应器Reactor&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>同步IO、异步IO、阻塞IO、非阻塞IO</title>
    <link href="https://liudong-code.github.io/2020/02/28/%E5%90%8C%E6%AD%A5IO%E3%80%81%E5%BC%82%E6%AD%A5IO%E3%80%81%E9%98%BB%E5%A1%9EIO%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9EIO/"/>
    <id>https://liudong-code.github.io/2020/02/28/%E5%90%8C%E6%AD%A5IO%E3%80%81%E5%BC%82%E6%AD%A5IO%E3%80%81%E9%98%BB%E5%A1%9EIO%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9EIO/</id>
    <published>2020-02-28T08:43:03.000Z</published>
    <updated>2020-02-28T08:47:20.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同步IO和异步IO"><a href="#同步IO和异步IO" class="headerlink" title="同步IO和异步IO"></a>同步IO和异步IO</h3><p>同步和异步是针对应用程序和内核的交互而言的，</p><ul><li>同步指的是用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪，</li><li>异步是指用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知。</li></ul><p>指的是用户空间和内核空间数据交互的方式</p><p>​        同步：用户空间要的数据，必须等到内核空间给它才做其他事情</p><p>​        异步：用户空间要的数据，不需要等到内核空间给它，才做其他事情。内核空间会异步通知用户进程，并把</p><p>数据直接给到用户空间</p><h3 id="阻塞IO和非阻塞IO"><a href="#阻塞IO和非阻塞IO" class="headerlink" title="阻塞IO和非阻塞IO"></a>阻塞IO和非阻塞IO</h3><ul><li>阻塞方式下读取或者写入函数将一直等待，</li><li>非阻塞方式下，读取或者写入函数会立即返回一个状态值。</li></ul><p>指的是用户就和内核空间IO操作的方式</p><p>​        堵塞：用户空间通过系统调用（systemcall）和内核空间发送IO操作时，该调用是堵塞的</p><p>​        非堵塞：用户空间通过系统调用（systemcall）和内核空间发送IO操作时，该调用是不堵塞的，直接返回的，</p><p>只是返回时，可能没有数据而已</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同步IO和异步IO&quot;&gt;&lt;a href=&quot;#同步IO和异步IO&quot; class=&quot;headerlink&quot; title=&quot;同步IO和异步IO&quot;&gt;&lt;/a&gt;同步IO和异步IO&lt;/h3&gt;&lt;p&gt;同步和异步是针对应用程序和内核的交互而言的，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步指的是用
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Socket网络编程</title>
    <link href="https://liudong-code.github.io/2020/02/28/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://liudong-code.github.io/2020/02/28/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2020-02-28T08:29:54.000Z</published>
    <updated>2020-02-28T08:37:52.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 要连接的服务端IP地址和端口</span></span><br><span class="line">String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">55533</span>;</span><br><span class="line"><span class="comment">// 与服务端建立连接</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line"><span class="comment">// 建立连接后获得输出流</span></span><br><span class="line">OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">String message=<span class="string">"你好 yiwangzhibujian"</span>;</span><br><span class="line">socket.getOutputStream().write(message.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">outputStream.close();</span><br><span class="line">socket.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 监听指定的端口</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">55533</span>;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        <span class="comment">// server将一直等待连接的到来</span></span><br><span class="line">        System.out.println(<span class="string">"server将一直等待连接的到来"</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">            sb.append(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len,<span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"get message from client: "</span> + sb);</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 监听指定的端口</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">55533</span>;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        <span class="comment">// server将一直等待连接的到来</span></span><br><span class="line">        System.out.println(<span class="string">"server将一直等待连接的到来"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">                sb.append(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len, <span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"get message from client: "</span> + sb);</span><br><span class="line">            inputStream.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 监听指定的端口</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">55533</span>;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        <span class="comment">// server将一直等待连接的到来</span></span><br><span class="line">        System.out.println(<span class="string">"server将一直等待连接的到来"</span>);</span><br><span class="line">        <span class="comment">//如果使用多线程，那就需要线程池，防止并发过高时创建过多线程耗尽资源</span></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;Socket socket = server.accept();</span><br><span class="line">            Runnable runnable=()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">                    InputStream inputStream = socket.getInputStream();</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">                        sb.append(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len, <span class="string">"UTF-8"</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"get message from client: "</span> + sb);</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            threadPool.submit(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>IO访问方式</title>
    <link href="https://liudong-code.github.io/2020/02/28/IO%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/"/>
    <id>https://liudong-code.github.io/2020/02/28/IO%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</id>
    <published>2020-02-28T03:50:23.000Z</published>
    <updated>2020-02-28T08:27:25.684Z</updated>
    
    <content type="html"><![CDATA[<h3 id="磁盘IO"><a href="#磁盘IO" class="headerlink" title="磁盘IO"></a>磁盘IO</h3><p>​        当应用程序调用read接口时，操作系统检查在内核的高速缓存有没有需要的数据，如果已经缓存了，那么就直接从 缓存中返回，如果没有，则从磁盘中读取，然后缓存在操作系统的缓存中。<br>​        当应用程序调用write接口时，将数据从用户地址空间复制到内核地址空间的缓存中，这时对用户程序来说，写操作已 经完成，至于什么时候再写到磁盘中，由操作系统决定，除非显示调用了sync同步命令。</p><h3 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h3><p>​    1）操作系统将数据从磁盘复制到操作系统内核的页缓存中</p><p>​    2）应用将数据从内核缓存复制到应用的缓存中 </p><p>​    3）应用 将数据写回内核的Socket缓存中</p><p>​    4）操作系统将数据从Socket缓存区复制到网卡缓存，然后将其通过网络发出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是图，图待补...</span><br></pre></td></tr></table></figure><p>1、当调用read系统调用时，通过DMA（Direct Memory Access）将数据copy到内核模式 </p><p>2、然后由CPU控制将内 核模式数据copy到用户模式下的 buffer中 </p><p>3、read调用完成后，write调用首先将用户模式下 buffer中的数据copy到内核模式下的socket buffer中 </p><p>4、最后通过DMA copy将内核模式下的socket buffer中的数据copy到网卡设备中传送。</p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ul><li>磁盘IO主要的延时是由（以15000rpm硬盘为例）： 机械转动延时（机械磁盘的主要性能瓶颈，平均为2ms） + 寻址延时（2~3ms） + 块传输延时（一般4k每块，40m/s的传输速度，延时一般为0.1ms) 决定。（平均为5ms）</li><li>网络IO主要延是由： 服务器响应延时 + 带宽限制 + 网络延时 + 跳转路由延时 + 本地接收延时 决定。（一般为几十到几千毫秒，受环境干扰极大）<br>所以两者一般来说网络IO延时要大于磁盘IO的延时。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;磁盘IO&quot;&gt;&lt;a href=&quot;#磁盘IO&quot; class=&quot;headerlink&quot; title=&quot;磁盘IO&quot;&gt;&lt;/a&gt;磁盘IO&lt;/h3&gt;&lt;p&gt;​        当应用程序调用read接口时，操作系统检查在内核的高速缓存有没有需要的数据，如果已经缓存了，那么就直接从 
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>缓存IO和直接IO</title>
    <link href="https://liudong-code.github.io/2020/02/28/%E7%BC%93%E5%AD%98IO%E5%92%8C%E7%9B%B4%E6%8E%A5IO/"/>
    <id>https://liudong-code.github.io/2020/02/28/%E7%BC%93%E5%AD%98IO%E5%92%8C%E7%9B%B4%E6%8E%A5IO/</id>
    <published>2020-02-28T02:21:56.000Z</published>
    <updated>2020-02-28T03:23:17.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>缓存IO：数据从磁盘通过DMA copy到内核空间，再从内核空间通过CPU copy到用户空间。</li><li>直接IO：数据从磁盘通过DMA copy到用户空间。</li></ul><h3 id="缓存IO"><a href="#缓存IO" class="headerlink" title="缓存IO"></a>缓存IO</h3><p>​        <strong>缓存I/O又被称作标准IO，大多数文件系统的默认操作都是缓存IO。在Linux的缓存IO机制中，数据先从磁盘复制到内核空间的缓冲区，然后从内核空间缓冲区复制到应用程序的地址空间。</strong></p><ul><li><p>读操作：</p><p>操作系统检查内核的缓冲区有没有西药的数据，如果已经缓存，那么直接从缓存中返回；否则从磁盘中读取，然后缓存在操作系统的缓存中。</p></li><li><p>写操作：</p><p>数据从用户空间复制到内核空间的缓存中，这时对用户程序来说写操作就已经完后才能，至于什么时候在写到磁盘中由操作系统决定，除非显示的调用了sync同步命令。–《【珍藏】linux 同步IO: sync、fsync与<br>fdatasync》。</p></li><li><p>缓存I/O的优点：</p><p>1）在一定程度上分离了内核空间和用户空间，保护系统本身的运行安全；</p><p>2）可以减少读盘的次数，从而提高性能。</p></li><li><p>缓存I/O的缺点：</p><p>在缓存 I/O 机制中，DMA 方式可以将数据直接从磁盘读到页缓存中，或者将数据从页缓存直接写回到磁盘</p><p>上，而不能直接在应用程序地址空间和磁盘之间进行数据传输，这样，数据在传输过程中需要在应用程序地址</p><p>空间（用户空间）和缓存（内核空间）之间进行多次数据拷贝操作，这些数据拷贝操作所带来的CPU以及内存</p><p>开销是非常大的。</p></li></ul><h3 id="直接IO"><a href="#直接IO" class="headerlink" title="直接IO"></a>直接IO</h3><p>​        <strong>直接IO就是应用程序直接访问磁盘数据，而不经过内核缓冲区，也就是绕过内核缓冲区，自己管理IO缓冲区，这样做的目的是减少一次从内核缓冲区带用户程序缓存的数据复制。</strong></p><ul><li><p>直接IO的优点</p><p>​        应用程序直接访问磁盘数据，不经过操作系统内核数据缓冲区，这样做的目的是减少一次从内核缓冲区到用户程序 缓存的数据复制。这种方式通常是在对数据的缓存管理由应用程序实现的数据库管理系统中。</p><p>​        引入内核缓冲区的目的在于提高磁盘文件的访问性能，因为当进程需要读取磁盘文件时，如果文件内容已经在内核缓 冲区中，那么就不需要再次访问磁盘；而当进程需要向文件中写入数据时，实际上只是写到了内核缓冲区便告诉进程 已经写成功，而真正写入磁盘是通过一定的策略进行延迟的。</p><p>​        然而，对于一些较复杂的应用，比如数据库服务器，它们为了充分提高性能，希望绕过内核缓冲区，由自己在用户 态空间实现并管理I/O缓冲区，包括缓存机制和写延迟机制等，以支持独特的查询机制，比如数据库可以根据更加 合理的策略来提高查询缓存命中率。另一方面，绕过内核缓冲区也可以减少系统内存的开销，因为内核缓冲区本身就 在使用系统内存。</p></li><li><p>直接IO的缺点</p><p>​        如果访问的数据不在应用程序缓存中，那么每次数据都会直接从磁盘进行加载，这种直接加载 会非常缓慢。通常直接I/O跟异步I/O结合使用会得到较好的性能。</p></li></ul><p>​                   <img src="/liudong-code.github.io/2020/02/28/%E7%BC%93%E5%AD%98IO%E5%92%8C%E7%9B%B4%E6%8E%A5IO/IO.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;缓存IO：数据从磁盘通过DMA copy到内核空间，再从内核空间通过CPU copy到用户空间。&lt;/li&gt;
&lt;li&gt;直接IO：数
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>PIO和DMA</title>
    <link href="https://liudong-code.github.io/2020/02/28/PIO%E5%92%8CDMA/"/>
    <id>https://liudong-code.github.io/2020/02/28/PIO%E5%92%8CDMA/</id>
    <published>2020-02-28T02:09:06.000Z</published>
    <updated>2020-02-28T02:20:04.626Z</updated>
    
    <content type="html"><![CDATA[<h4 id="慢速IO设备和内存之间的数据传输方式有下面两种："><a href="#慢速IO设备和内存之间的数据传输方式有下面两种：" class="headerlink" title="慢速IO设备和内存之间的数据传输方式有下面两种："></a>慢速IO设备和内存之间的数据传输方式有下面两种：</h4><ul><li>PIO：磁盘和内存之间的数据传输是需要CPU控制的，也就是说如果我们<strong>读取磁盘文件到内存中，数据要经过CPU储存转发，这种方式成为PIO</strong>。这种方式是不合理的，需要大量的CPU时间来读取文件，照成文件访问时系统几乎停止响应。</li><li>DMA：<strong>DMA（直接内存访问，Direct Memory Access），不经过CPU而直接进行磁盘和内存（内核空间）的数据交换</strong>。在DMA的模式下，CPU只需要向DMA控制器下达指令，让DMA控制器来处理数据和传达即可，DMA控制器通过系统总线来传输数据，传送完毕再通知CPU，这样就在很大程度上降低了CPU占有率，大大节省了系统资源，而它的传输速度与PIO的差异并不是十分明显，因为这主要取决于慢速设备的速度。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;慢速IO设备和内存之间的数据传输方式有下面两种：&quot;&gt;&lt;a href=&quot;#慢速IO设备和内存之间的数据传输方式有下面两种：&quot; class=&quot;headerlink&quot; title=&quot;慢速IO设备和内存之间的数据传输方式有下面两种：&quot;&gt;&lt;/a&gt;慢速IO设备和内存之间的数据
      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>用户空间和内核空间</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4/</id>
    <published>2020-02-27T15:14:39.000Z</published>
    <updated>2020-02-27T15:56:55.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>虚拟内存被操作系统划分成两块：内核空间和用户空间，</p><p><strong>内核空间</strong>是内核代码运行的地方，</p><p><strong>用户空间</strong>是用户程序代码运行的地方</p><p>当进程运行在内核空间时就处于内核态，当进程运行在用户空间时就处于用户态。</p><p>简单说，</p><p>Kernel space 是 Linux 内核的运行空间，</p><p>User space 是用户程序的运行空间。</p><p>为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响。</p><p>Kernel space 可以执行任意命令，调用系统的一切资源；</p><p>User space 只能执行简单的运算，不能直接调用系统<br>资源，必须通过系统接口（又称 system call），才能向内核发出指令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"my string"</span> <span class="comment">// 用户空间</span></span><br><span class="line">x = x + <span class="number">2</span></span><br><span class="line">file.<span class="built_in">write</span>(str) <span class="comment">// 切换到内核空间</span></span><br><span class="line">y = x + <span class="number">4</span> <span class="comment">// 切换回用户空间</span></span><br></pre></td></tr></table></figure><p>第一行和第二行都是简单的赋值运算，在 User space 执行。</p><p>第三行需要写入文件，就要切换到Kernel space，因为用户不能直接写文件，必须通过内核安排。</p><p>第四行又是赋值运算，就切换回 User space。</p><p>查看 CPU 时间在 User space 与 Kernel Space 之间的分配情况，可以使用top命令。它的第三行输出就是 CPU 时间分配统计。</p><p><img src="/liudong-code.github.io/2020/02/27/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4/cpu.png" alt> </p><p>其中，第一项24.8 us（user 的缩写）就是 CPU 消耗在 User space 的时间百分比，第二项0.5 sy（system 的<br>缩写）是消耗在 Kernel space 的时间百分比。<br>随便也说一下其他 6 个指标的含义。<br>ni：niceness 的缩写，CPU 消耗在 nice 进程（低优先级）的时间百分比<br>id：idle 的缩写，CPU 消耗在闲置进程的时间百分比，这个值越低，表示 CPU 越忙<br>wa：wait 的缩写，CPU 等待外部 I/O 的时间百分比，这段时间 CPU 不能干其他事，但是也没有执行运算，这个<br>值太高就说明外部设备有问题<br>hi：hardware interrupt 的缩写，CPU 响应硬件中断请求的时间百分比<br>si：software interrupt 的缩写，CPU 响应软件中断请求的时间百分比<br>st：stole time 的缩写，该项指标只对虚拟机有效，表示分配给当前虚拟机的 CPU 时间之中，被同一台物理机上<br>的其他虚拟机偷走的时间百分比</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;虚拟内存被操作系统划分成两块：内核空间和用户空间，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内核空间&lt;/strong&gt;是内核代码运行的地方，&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="IO模型" scheme="https://liudong-code.github.io/tags/IO%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList和LinkedList有什么区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/ArrayList%E5%92%8CLinkedList%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/ArrayList%E5%92%8CLinkedList%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T09:00:12.000Z</published>
    <updated>2020-02-27T09:03:51.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>LinkedList和ArrayList的差别主要来自于Array和LinkedList数据结构的不同。<strong>ArrayList是基于数组实现的，LinkedList是基于双链表实现的。</strong>另外LinkedList类不仅是List接口的实现类，可以根据索引来随机访问集合中的元素，除此之外，LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向对列，栈（可以参见Deque提供的接口方法）和List集合使用，功能强大。</li><li>因为Array是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的，可以直接返回数组中index位置的元素，因此在随机访问集合元素上有较好的性能。Array获取数据的时间复杂度是O(1),但是要插入、删除数据却是开销很大的，因为这需要移动数组中插入位置之后的的所有元素。</li><li>相对于ArrayList，LinkedList的随机访问集合元素时性能较差，因为需要在双向列表中找到要index的位置，再返回；但在插入，删除操作是更快的。因为LinkedList不像ArrayList一样，不需要改变数组的大小，也不需要在数组装满的时候要将所有的数据重新装入一个新的数组，这是ArrayList最坏的一种情况，时间复杂度是O(n)，而LinkedList中插入或删除的时间复杂度仅为O(1)。ArrayList在插入数据时还需要更新索引（除了插入数组的尾部）。</li><li>LinkedList需要更多的内存，因为ArrayList的每个索引的位置是实际的数据，而LinkedList中的每个节点中存储的是实际的数据和前后节点的位置。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>如果应用程序对数据有较多的随机访问，ArrayList对象要优于LinkedList对象；</li><li>如果应用程序有更多的插入或者删除操作，较少的数据读取，LinkedList对象要优于ArrayList对象；</li><li>不过ArrayList的插入，删除操作也不一定比LinkedList慢，如果在List靠近末尾的地方插入，那么ArrayList只需要移动较少的数据，而LinkedList则需要一直查找到列表尾部，反而耗费较多时间，这时ArrayList就比LinkedList要快</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;LinkedList和ArrayList的差别主要来自于Array和LinkedList数据结构的不同。&lt;strong&gt;Arra
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>final，finally，finalize的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/final%EF%BC%8Cfinally%EF%BC%8Cfinalize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/final%EF%BC%8Cfinally%EF%BC%8Cfinalize%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T08:31:46.000Z</published>
    <updated>2020-02-27T08:57:27.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-简单区别："><a href="#1-简单区别：" class="headerlink" title="1.简单区别："></a>1.简单区别：</h3><ul><li>final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</li><li>finally是异常处理语句结构的一部分，表示总是执行。</li><li>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul><h3 id="2-中等区别："><a href="#2-中等区别：" class="headerlink" title="2.中等区别："></a>2.中等区别：</h3><ul><li>final：java中的关键字，修饰符。</li><li>如果一个类被声明为final，就意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能同时被声明为abstract抽象类的和final的类。</li><li>如果将变量或者方法声明为final，可以保证它们在使用中不被改变.<br>  　　    1)被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。<br>  　　    2)被声明final的方法只能使用，不能重载。</li><li>finally：java的一种异常处理机制。</li><li>finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</li></ul><ul><li>finalize：Java中的一个方法名。<br>Java技术使用finalize()方法在垃圾收集器将对象从内存中清除出去前，做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没被引用时对这个对象调用的。它是在Object类中定义的，因此所的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。</li></ul><h3 id="3-详细区别："><a href="#3-详细区别：" class="headerlink" title="3.详细区别："></a>3.详细区别：</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><ul><li>第一种情况：<br>如果final修饰的是一个基本类型，就表示这个变量被赋予的值是不可变的，即它是个常量；<br>如果final修饰的是一个对象，就表示这个变量被赋予的引用是不可变的<br>这里需要提醒大家注意的是，不可改变的只是这个变量所保存的引用，并不是这个引用所指向的对象。</li><li>第二种情况：<br>final的含义与第一种情况相同。<br>实际上对于前两种情况，一种更贴切的表述final的含义的描述，那就是，如果一个变量或方法参数被final修饰，就表示它只能被赋值一次，但是JAVA虚拟机为变量设定的默认值不记作一次赋值。被final修饰的变量必须被初始化。初始化的方式以下几种：<br>1.在定义的时候初始化。<br>2.final变量可以在初始化块中初始化，不可以在静态初始化块中初始化。<br>3.静态final变量可以在定义时初始化，也可以在静态初始化块中初始化，不可以在初始化块中初始化。<br>4.final变量还可以在类的构造器中初始化，但是静态final变量不可以。</li></ul><h5 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h5><pre><code>当final用来定义一个方法时，它表示这个方法不可以被子类重写，但是并不影响它被子类继承。</code></pre><h5 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h5><p>​        final类不允许被继承，编译器在处理时把它的所方法都当作final的，因此final类比普通类拥更高的效率。而由关键字abstract定义的抽象类含必须由继承自它的子类重载实现的抽象方法，因此无法同时用final和abstract来修饰同一个类。同样的道理，final也不能用来修饰接口。 final的类的所方法都不能被重写，但这并不表示final的类的属性（变量值也是不可改变的，要想做到final类的属性值不可改变，必须给它增加final修饰</p><h4 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h4><p>​         finally只能用在try/catch语句中并且附带着一个语句块，表示这段语句最终总是被执行 。</p><h4 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h4><p>​        它是一个方法，属于java.lang.Object类，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span><span class="keyword">throws</span> Throwable</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​        众所周知，finalize()方法是GC  （garbagecollector）运行机制的一部分,在此我们只说说finalize()方法的作用是什么呢？finalize()方法是在GC清理它所从属的对象时被调用的，如果执行它的过程中抛出了无法捕获的异常（uncaughtexception），GC将终止对改对象的清理，并且该异常会被忽略；直到下一次GC开始清理这个对象时，它的finalize()会被再次调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-简单区别：&quot;&gt;&lt;a href=&quot;#1-简单区别：&quot; class=&quot;headerlink&quot; title=&quot;1.简单区别：&quot;&gt;&lt;/a&gt;1.简单区别：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。&lt;/l
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T08:04:55.000Z</published>
    <updated>2020-02-27T08:22:29.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>《系统架构师》一书中给出的定义是：</p><ul><li><strong>进程</strong>（process）是资源分配和独立运行的基本单位。研究操作系统的进程，实质是研究系统中诸多进程之间的并发特性以及进程之间的相互制约性。</li><li><strong>线程</strong>是进程中的一个实体，是被系统独立分配和调度的基本操作单位。具有就绪、运行、阻塞三种状态。</li></ul><p>一个进程有若干个线程，线程只拥有一些运行中必不可少的资源，它可与同一个进程的其他线程共享进程所拥有的的全部资源。线程可创建另外一个线程，同一个进程中的多个线程可并发执行。</p><h3 id="Linux中的概念"><a href="#Linux中的概念" class="headerlink" title="Linux中的概念"></a>Linux中的概念</h3><ul><li><p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。 </p></li><li><p>Linux系统函数<code>fork()</code>可以在父进程中创建一个子进程，这样的话，在一个进程接到来自客户端新的请求时就可以复制出一个子进程让其来处理，父进程只需负责监控请求的到来，然后创建子进程让其去处理，这样就能做到并发处理。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print('当前进程:%s 启动中 ....' % os.getpid())</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print('子进程:%s,父进程是:%s' % (os.getpid(), os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print('进程:%s 创建了子进程:%s' % (os.getpid(),pid ))</span><br><span class="line">        </span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">当前进程:<span class="number">27223</span> 启动中 ....</span><br><span class="line">进程:<span class="number">27223</span> 创建了子进程:<span class="number">27224</span></span><br><span class="line">子进程:<span class="number">27224</span>,父进程是:<span class="number">27223</span></span><br></pre></td></tr></table></figure></li><li><p>线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。 </p></li></ul><h3 id="区别和优劣"><a href="#区别和优劣" class="headerlink" title="区别和优劣"></a>区别和优劣</h3><ul><li><p>进程是资源分配的最小单位，线程是程序执行的最小单位。</p></li><li><p>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</p></li><li><p>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</p></li><li><p>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</p><p>参考书籍《Unix网络编程》</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;《系统架构师》一书中给出的定义是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;（process）是资源分配和独立运行的
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>泛型中extends和super的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E6%B3%9B%E5%9E%8B%E4%B8%ADextends%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E6%B3%9B%E5%9E%8B%E4%B8%ADextends%E5%92%8Csuper%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T07:35:59.000Z</published>
    <updated>2020-02-27T07:58:34.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="释义："><a href="#释义：" class="headerlink" title="释义："></a>释义：</h3><p>在非泛型中：</p><ul><li><code>extends</code>：让一个类继承另外一个类；</li><li><code>super</code>：指向父类对象的引用；</li></ul><p>在泛型中：</p><ul><li><code>extends</code>也成为上界通配符，就是指定上边界。即泛型中的类必须为当前类的子类或当前类。</li><li><code>super</code>也称为下届通配符，就是指定下边界。即泛型中的类必须为当前类或者其父类。</li></ul><p>看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">extends</span> <span class="title">Food</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExtends</span><span class="params">(List&lt;? extends Fruit&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//报错,extends为上界通配符,只能取值,不能放.</span></span><br><span class="line">    <span class="comment">//因为Fruit的子类不只有Apple还有Banana,这里不能确定具体的泛型到底是Apple还是Banana，所以放入任何一种类型都会报错</span></span><br><span class="line">    <span class="comment">//list.add(new Apple());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以正常获取</span></span><br><span class="line">    Fruit fruit = list.get(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuper</span><span class="params">(List&lt;? <span class="keyword">super</span> Fruit&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//super为下界通配符，可以存放元素，但是也只能存放当前类或者子类的实例，以当前的例子来讲，</span></span><br><span class="line">    <span class="comment">//无法确定Fruit的父类是否只有Food一个(Object是超级父类)</span></span><br><span class="line">    <span class="comment">//因此放入Food的实例编译不通过</span></span><br><span class="line">    list.add(<span class="keyword">new</span> Apple());</span><br><span class="line">    <span class="comment">// list.add(new Food());</span></span><br><span class="line">    Object object = list.get(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p> 在testExtends方法中，因为泛型中用的是extends，在向list中存放元素的时候，我们并不能确定List中的元素的具体类型，即可能是Apple也可能是Banana。因此调用add方法时，不论传入new Apple()还是new Banana()，都会出现编译错误。</p></li><li><p>理解了extends之后，再看super就很容易理解了，即我们不能确定testSuper方法的参数中的泛型是Fruit的哪个父类，因此在调用get方法时只能返回Object类型。结合extends可见，在获取泛型元素时，使用extends获取到的是泛型中的上边界的类型(本例子中为Fruit),范围更小。</p></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>在使用泛型时，存取元素时用<code>super</code>,获取元素时，用<code>extends</code>。</p><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><p> 通配符 <code>?</code> 使用 </p><p> 在泛型中的通配符就是一个<strong>问号</strong>，标准叫法是<strong>无界通配符</strong>，它一般使用在参数或变量的声明上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在参数中使用无界通配符 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123; </span><br><span class="line">     Object o = list.get(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在变量声明中使用无界通配符</span></span><br><span class="line">    List&lt;?&gt; list2 = list1;</span><br><span class="line"></span><br><span class="line">    test(list1);</span><br><span class="line">    test(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>泛型中使用无界通配符，表示泛型可以是任意具体的类型，没有限制（基本数据类型除外，基本数据类型不能用作泛型，可以使用基本数据类型的包装类）； </p></li><li><p>所以无界通配符给人的感觉就和原生的类型没什么区别，比如就上面这段代码，使用List&lt;?&gt;，和直接使用List，好像是一样的；但是实际上还是有一些区别的，比如看下面这段代码: </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 在参数中使用无界通配符 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123; </span><br><span class="line">     <span class="comment">// 均编译错误，因为使用了无界通配符，编译器无法确定具体是什么类型</span></span><br><span class="line">    <span class="comment">// list.add(1111);</span></span><br><span class="line">    <span class="comment">// list.add("aaa");</span></span><br><span class="line">    <span class="comment">// list.add(new Object());</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在参数中使用原生List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译通过，不加泛型时，编译器默认为Object类型</span></span><br><span class="line">    list.add(<span class="number">1111</span>);</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="keyword">new</span> Object());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 声明两个泛型明确的list集合</span></span><br><span class="line">    List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 调用使用了&lt;？&gt;的方法</span></span><br><span class="line">    test1(list1);</span><br><span class="line">    test2(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>List</strong>：表示可以存储任意Object类型的集合；</li><li><strong>List</strong>：表示一个存储某种<strong>特定类型</strong>的List集合，但是不知道这种特定类型是什么；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;释义：&quot;&gt;&lt;a href=&quot;#释义：&quot; class=&quot;headerlink&quot; title=&quot;释义：&quot;&gt;&lt;/a&gt;释义：&lt;/h3&gt;&lt;p&gt;在非泛型中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extends&lt;/code&gt;：让一个类继承另外一个类；&lt;/li&gt;
&lt;li&gt;&lt;co
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>String，Stringbuffer，StringBuilder的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/String%EF%BC%8CStringbuffer%EF%BC%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/String%EF%BC%8CStringbuffer%EF%BC%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T07:16:10.000Z</published>
    <updated>2020-02-27T07:19:07.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>  string类是不可变的：创建一个String对象之后，任何对这个对象的改变都会引起一个新的String对象生成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str =<span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">str = str +<span class="string">"def"</span>;<span class="comment">//这一步jvm会再次创建一个String对象</span></span><br></pre></td></tr></table></figure><p>第二次其实jvm又生成了一个String类，而不是直接覆盖原来的”abc”，因此我们说String类是不可改变类。这一种特性会带来一个问题，每次拼接都要创建都要创建一次对象，当我们要拼接大量字符串的时候，效率会变得非常非常慢。</p><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a><strong>StringBuffer</strong></h3><p> StringBuffer 不同于String的是，stringbuffer 是可变的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb =<span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"> sb.append(<span class="string">"efg"</span>);<span class="comment">//并没有创建一个新的对象</span></span><br></pre></td></tr></table></figure><p>这里第二步并没有产生一个新的对象，而是在原来的基础上追加字符串，这种方式在拼接字符串的时候效率肯定比String要高得多。</p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>StringBuffer和StringBuilder类的区别也是如此，他们的原理和操作基本相同，区别在于StringBuffer支持并发操作，线性安全的，适 合多线程中使用。StringBuilder不支持并发操作，线性不安全的，不适合多线程中使用。新引入的StringBuilder类不是线程安全的，但其在单线程中的性能比StringBuffer高。</p><h3 id="total"><a href="#total" class="headerlink" title="total:"></a>total:</h3><p>1.如果要操作少量的数据用 String</p><p>2.单线程操作字符串缓冲区下操作大量数据用StringBuilder</p><p>3.多线程操作字符串缓冲区下操作大量数据用StringBuffer</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h3&gt;&lt;p&gt;  string类是不可变的：创建一个String对象之后，任何对这个对象的改变都会引起一个新的String
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java中的可变对象与不可变对象</title>
    <link href="https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
    <id>https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-02-27T06:59:24.000Z</published>
    <updated>2020-02-27T07:09:51.291Z</updated>
    
    <content type="html"><![CDATA[<h4 id="不可变对象-（Immutable-Objects）"><a href="#不可变对象-（Immutable-Objects）" class="headerlink" title="不可变对象 （Immutable Objects）"></a>不可变对象 （Immutable Objects）</h4><p>​         对象一旦被创建它的状态（对象的数据，也即对象属性值）就不能改变，任何对它的改变都应该产生一个新的对象。 </p><p>​         不可变对象的类即为不可变类(Immutable Class)。JAVA平台类库中包含许多不可变类，如String、基本类型的包装类、BigInteger和BigDecimal等 .</p><h4 id="可变对象-Mutable-Objects"><a href="#可变对象-Mutable-Objects" class="headerlink" title="可变对象(Mutable Objects)"></a>可变对象(Mutable Objects)</h4><p>​         相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。 </p><h4 id="编写不可变类"><a href="#编写不可变类" class="headerlink" title="编写不可变类"></a>编写不可变类</h4><p>   1.确保类不能被继承：将类声明为final, 或者使用静态工厂并声明构造器为private </p><ol start="2"><li><p>使用private和final修饰符来修饰该类的属性 </p></li><li><p>如果成员属性为可变对象属性，不要使这些对象改变： </p><p>1）不要提供更改可变对象的方法 </p><p>2）不要共享对可变对象的引用，不要存储传给构造器的外部可变对象的引用。因为引用可变对象的成员变量和外部可变对象的引用指向同一块内存地址，用户可以在不可变类之外通过修改可变对象的值 </p><p>为了保证内部的值不被修改，可以采用深度拷贝的方法来复制一个对象并传入副本的引用来确保类的不可变 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImmutableDemo</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] myArray;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyImmutableDemo</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.myArray = array.clone();   </span><br><span class="line"></span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> C. 不要提供任何可以修改对象状态的方法（不仅仅是set方法, 还有任何其它可以改变状态的方法） </p><h4 id="不可变对象的优缺点"><a href="#不可变对象的优缺点" class="headerlink" title="不可变对象的优缺点"></a>不可变对象的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>* 构造、测试和使用都很简单</p><p>* 不可变对象是线程安全的，在线程之间可以相互共享，不需要利用特殊机制来保证同步问题，因为对象的值无法改变。可以降低并发错误的可能性，因为不需要用一些锁机制等保证内存一致性问题也减少了同步开销。</p><p>* 不可变对象可以被重复使用，可以将它们缓存起来重复使用，就像字符串字面量和整型数字一样。可以使用静态工厂方法来提供类似于valueOf()这样的方法，它可以从缓存中返回一个已经存在的Immutable对象，而不是重新创建一个。</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p> * 不可变对象最大的缺点就是创建对象的开销，因为每一步操作都会产生一个新的对象,制造大量垃圾，由于他们不能被重用而且对于它们的使用就是”用“然后”扔“，会创造很多的垃圾，给垃圾收集带来很大的麻烦 </p><p>参考：<a href="https://blog.csdn.net/bupa900318/article/details/80696785" target="_blank" rel="noopener">https://blog.csdn.net/bupa900318/article/details/80696785</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;不可变对象-（Immutable-Objects）&quot;&gt;&lt;a href=&quot;#不可变对象-（Immutable-Objects）&quot; class=&quot;headerlink&quot; title=&quot;不可变对象 （Immutable Objects）&quot;&gt;&lt;/a&gt;不可变对象 （Immu
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>接口和抽象类的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T06:06:01.000Z</published>
    <updated>2020-02-27T07:43:41.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span></span><br></pre></td></tr></table></figure><p>​        抽象类必须用abstract 修饰，子类必须实现抽象类中的抽象方法，如果有方法未实现，那么子类的该方法也要用abstract 修饰。</p><p>​        默认的权限修饰符是：public，也可以是procted.如果是private的话，子类无法继承。</p><p>​        抽象类无法创建对象。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span></span></span><br></pre></td></tr></table></figure><p>​        接口中的变量隐式的使用Public static final 修饰，也要给出初始值</p><p>​        接口中的方法隐式的使用public abstract 修饰，只能是public  修饰。</p><p>​        接口中的方法默认的不能有实现（JDK1.8可以有默认实现）。</p><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ol><li>抽象类只能继承一次，但是可以有多个接口。</li><li>继承于抽象类或者接口的类，必须实现其中的所有方法，抽象类中的为实现的抽象方法，子类也需要定义为抽象类。</li><li>抽象类可以有非抽象方法。</li><li>接口的变量必须由public static final 修饰，并给出初始值，所以其实现类不能重新定义，也不能改变其值。</li><li>接口的方法默认是public abstract ，不能是static，抽象类中可以有static方法。</li><li>接口的方法也不允许子类覆写。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>抽象类的意义</title>
    <link href="https://liudong-code.github.io/2020/02/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://liudong-code.github.io/2020/02/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2020-02-27T05:53:43.000Z</published>
    <updated>2020-02-27T06:07:43.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抽象类的意义"><a href="#抽象类的意义" class="headerlink" title="抽象类的意义"></a>抽象类的意义</h3><p>最主要的：对代码的维护和重用。</p><p>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span></span><br></pre></td></tr></table></figure><p> <strong>1.因为抽象类不能实例化对象，所以必须要有子类来实现它之后才能使用。这样就可以把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护</strong> </p><p> <strong>2.当又有一个具有相似的组件产生时，只需要实现该抽象类就可以获得该抽象类的那些属性和方法。</strong>  </p><p>​    实际写代码的过程中，如果想要对某一个接口进行默认实现，并且不希望在该实现类 上创建实例，那么抽象类是一个不错地选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;抽象类的意义&quot;&gt;&lt;a href=&quot;#抽象类的意义&quot; class=&quot;headerlink&quot; title=&quot;抽象类的意义&quot;&gt;&lt;/a&gt;抽象类的意义&lt;/h3&gt;&lt;p&gt;最主要的：对代码的维护和重用。&lt;/p&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>int与Integer的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/int%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/int%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T05:13:32.000Z</published>
    <updated>2020-02-27T05:34:38.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> 是java的基本数据类型。</span><br></pre></td></tr></table></figure><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer 继承了Object类，是对象类型，是 <span class="keyword">int</span> 的包装类。</span><br></pre></td></tr></table></figure><h2 id="int-与-Integer-的区别"><a href="#int-与-Integer-的区别" class="headerlink" title="int 与 Integer 的区别"></a>int 与 Integer 的区别</h2><h5 id="1-值的储存"><a href="#1-值的储存" class="headerlink" title="1,值的储存"></a>1,值的储存</h5><p>​        int储存在栈中</p><p>​        Integer对象的引用储存在栈中，对象的数据储存在堆中。</p><h5 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2,初始化"></a>2,初始化</h5><p>​        int初始值是0</p><p>​        Integer的初始值是null</p><h5 id="3-传参"><a href="#3-传参" class="headerlink" title="3,传参"></a>3,传参</h5><p>​        int是值传递</p><p>​        Integer是引用传递，引用不可改变但是引用指向堆空间地址的值是可以改变的。</p><h5 id="4-泛型支持"><a href="#4-泛型支持" class="headerlink" title="4,泛型支持"></a>4,泛型支持</h5><p>​        泛型不支持int，但是支持Integer。</p><h5 id="5-运算"><a href="#5-运算" class="headerlink" title="5,运算"></a>5,运算</h5><p>​        int 可以直接做运算，是类的特性。<br>​        Integer 的对象可以调用该类的方法，但是在拆箱之前不能进行运算，需要转化为基本类型int。</p><h4 id="相同值下的-int-和-Integer-的比较结果"><a href="#相同值下的-int-和-Integer-的比较结果" class="headerlink" title="相同值下的 int 和 Integer 的比较结果"></a>相同值下的 int 和 Integer 的比较结果</h4><p>​    1,两个通过new生成的变量，结果为false。<br>​    2,int 和 Integer 的值比较，若两者的值相等，则为true。<br>​        （注意：在比较时，Integer会自动拆箱为int类型，然后再做比较。）<br>​    3,new 生成的Integer变量 和 非new 生成的Integer变量比较，，结果为false。<br>​        （注意：new 生成的Integer变量的值在堆空间中，非new 生成的Integer变量的值在在常量池中。）<br>​        （注意：非new生成的Integer变量，会先判断常量池中是否有该对象，若有则共享，若无则在常量池中放入            该对象；也叫享元模式，后面再说。）<br>​    4,两个非new 生成的Integer对象比较，则结果为true。<br>​        （注意：此处需要一个前提：值的范围在 -128 ~ 127 之间。<br>​        涉及到java对 int 与 Integer 的自动装箱和拆箱的一种模式：享元模式—flyweight，为了加强对简单数字的重        复利用。<br>​        在赋值时，其实是执行了Integer的valueOf()方法。<br>​        当值在 -128 ~ 127之间时，java会进行自动装箱，然后会对值进行缓存，如果下次再有相同的值，会直接在        缓存中取出使用。缓存是通过Integer的内部类IntegerCache来完成的。<br>​        当值超出此范围，会在堆中new出一个对象来存储。<br>​        PS：自动装箱与拆箱是在JDK1.5中出现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">int</span> a =<span class="number">12</span>;</span><br><span class="line">         Integer b =<span class="number">12</span>;</span><br><span class="line">         Integer c = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">         Integer d=<span class="number">128</span>;</span><br><span class="line">         Integer e=<span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a==b);</span><br><span class="line">        System.out.println(b==c);</span><br><span class="line">        System.out.println(d==e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>​    5,内部类IntegerCache<br>​        通过此类可以缓存简单数字。<br>​        缓存的数大小可以由 -XX：AutoBoxCacheMax = 控制。<br>​        jvm初始化时，java.lang.Integer.Integ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;int&quot;&gt;&lt;a href=&quot;#int&quot; class=&quot;headerlink&quot; title=&quot;int&quot;&gt;&lt;/a&gt;int&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java==和equals和hashCode的区别</title>
    <link href="https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD==%E5%92%8Cequals%E5%92%8ChashCode%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liudong-code.github.io/2020/02/27/Java%E4%B8%AD==%E5%92%8Cequals%E5%92%8ChashCode%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-27T02:00:49.000Z</published>
    <updated>2020-02-27T08:54:31.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中-和equals和hashCode的区别"><a href="#Java中-和equals和hashCode的区别" class="headerlink" title="Java中==和equals和hashCode的区别"></a>Java中==和equals和hashCode的区别</h2><h3 id="1，"><a href="#1，" class="headerlink" title="1，=="></a>1，==</h3><p>1, 基础类型：byte,short,char,int,double,boolean,float </p><p>​    他们之间用“==”，比较的是他们的值</p><p>2, 引用类型（类，接口，数组）</p><p>​    使用“==”进行比较的时候，比较的是内存地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       String str1 = <span class="keyword">new</span> String(<span class="string">"str"</span>);</span><br><span class="line">       String str2 = <span class="keyword">new</span> String(<span class="string">"str"</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"str1==str2:"</span> + (str1 == str2));</span><br><span class="line"></span><br><span class="line">       String str3=<span class="string">"str"</span>;</span><br><span class="line">       String str4=<span class="string">"str"</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(str3 == str4);</span><br><span class="line">       System.out.println(System.identityHashCode(str1));</span><br><span class="line">       System.out.println(System.identityHashCode(str2));</span><br><span class="line">       System.out.println(System.identityHashCode(str3));</span><br><span class="line">       System.out.println(System.identityHashCode(str4));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果为</p><p>str1==str2:false<br>true<br>32324749<br>31115012<br>3633860<br>3633860</p><p>  对象是放在堆中的，栈中存放的是对象的引用（地址）。由此可见’==’是对栈中的值进行比较的。如果要比较堆   中对象的内容是否相同，那么就要重写equals方法了。 </p><p> 但是这行代码，128！=128，a!=b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer a1 = <span class="number">127</span>;</span><br><span class="line">Integer b1 = <span class="number">127</span>;</span><br><span class="line">Integer a = <span class="number">128</span>;</span><br><span class="line">Integer b = <span class="number">128</span>;</span><br><span class="line">System.out.println(a1==b1);</span><br><span class="line">System.out.println(a==b);</span><br></pre></td></tr></table></figure><p>结果 true false</p><p>去看Integer的源码可以明白，是这段源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         high = h;</span><br><span class="line"></span><br><span class="line">             cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">             <span class="keyword">int</span> j = low;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">             <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">             <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Integer对于 对于-128到127之间的数，会进行缓存 。</p><h3 id="2，equals"><a href="#2，equals" class="headerlink" title="2，equals()"></a>2，equals()</h3><p> 1,默认没有重新的情况下，都调用的是Objects 的equals（）的方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);&#125;</span><br></pre></td></tr></table></figure><p>​    可以看到是Objects中的equal（）方法和== 是等同的。</p><p>2，日常的代码中会覆盖equal() 方法，下面是string 类 重写的equal（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    逻辑很明显：</p><ul><li>​    内存地址相同，直接返回true</li><li>​    比较对象是String类型，直接返回false</li><li>​    a和b长度不同，直接返回false</li><li>​    逐个字符比较，有不同就返回false</li></ul><h4 id="equal重写注意的五个原则"><a href="#equal重写注意的五个原则" class="headerlink" title="equal重写注意的五个原则"></a>equal重写注意的五个原则</h4><p>​    1  自反性：对任意引用值X，x.equals(x)的返回值一定为true.<br>​    2  对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true;<br>​    3  传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true<br>​    4  一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变<br>​    5  非空性：任何非空的引用值X，x.equals(null)的返回值一定为false  </p><h3 id="3，hashCode"><a href="#3，hashCode" class="headerlink" title="3，hashCode"></a>3，hashCode</h3><p>Objects给出的hashCode（）的原生代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>返回时的一个int 类型的数值。</p><p>下面是引用摘抄的</p><p>=======================================================================================</p><p> hashCode()方法返回的就是一个数值，从方法的名称上就可以看出，其目的是生成一个hash码。hash码的主要用途就是在对对象进行散列的时候作为key输入，据此很容易推断出，我们需要每个对象的hash码尽可能不同，这样才能保证散列的存取性能。事实上，Object类提供的默认实现确实保证每个对象的hash码不同（在对象的内存地址基础上经过特定算法返回一个hash码）。Java采用了哈希表的原理。哈希（Hash）实际上是个人名，由于他提出一哈希算法的概念，所以就以他的名字命名了。 哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上。   </p><p> 散列函数,散列算法,哈希函数。<br>是一种从任何一种数据中创建小的数字“指纹”的方法。<br>散列函数将任意长度的二进制值映射为较短的固定长度的二进制值，这个小的二进制值称为哈希值。<br>好的散列函数在输入域中很少出现散列冲突。 </p><p>======================================================================================</p><h5 id="hashCode的作用"><a href="#hashCode的作用" class="headerlink" title="hashCode的作用"></a>hashCode的作用</h5><p>想要明白，必须要先知道Java中的集合。　　<br>总的来说，Java中的集合（Collection）有两类，一类是List，再有一类是Set。前者集合内的元素是有序的，元素可以重复；后者元素无序，但元素不可重复。</p><p>那么这里就有一个比较严重的问题了：要想保证元素不重复，可两个元素是否重复应该依据什么来判断呢？ </p><p>这就是Object.equals方法了。但是，如果每增加一个元素就检查一次，那么当元素很多时，后添加到集合中的元素比较的次数就非常多了。也就是说，如果集合中现在已经有1000个元素，那么第1001个元素加入集合时，它就要调用1000次equals方法。这显然会大大降低效率。<br>于是，Java采用了哈希表的原理。 </p><p>这样一来，当集合要添加新的元素时，</p><p>先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。 </p><p>如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；</p><p>如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存，不相同就散列其它的地址。所以这里存在一个冲突解决的问题。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。</p><h3 id="4、eqauls方法和hashCode方法关系"><a href="#4、eqauls方法和hashCode方法关系" class="headerlink" title="4、eqauls方法和hashCode方法关系"></a><strong>4、eqauls方法和hashCode方法关系</strong></h3><p>Java对于eqauls方法和hashCode方法是这样规定的： </p><p>(1)同一对象上多次调用hashCode()方法，总是返回相同的整型值。</p><p>(2)如果a.equals(b)，则一定有a.hashCode() 一定等于 b.hashCode()。<br>(3)如果!a.equals(b)，则a.hashCode() 不一定等于 b.hashCode()。此时如果a.hashCode() 总是不等于 b.hashCode()，会提高hashtables的性能。</p><p>(4)a.hashCode()==b.hashCode() 则 a.equals(b)可真可假</p><p>(5)a.hashCode()！= b.hashCode() 则 a.equals(b)为假。 </p><p>上面结论简记：</p><p>1、如果两个对象equals，Java运行时环境会认为他们的hashcode一定相等。<br>2、如果两个对象不equals，他们的hashcode有可能相等。<br>3、如果两个对象hashcode相等，他们不一定equals。<br>4、如果两个对象hashcode不相等，他们一定不equals。</p><h5 id="关于这两个方法的重要规范："><a href="#关于这两个方法的重要规范：" class="headerlink" title="关于这两个方法的重要规范："></a>关于这两个方法的重要规范：</h5><p>规范1：若重写equals(Object obj)方法，有必要重写hashcode()方法，确保通过equals(Object obj)方法判断结果为true的两个对象具备相等的hashcode()返回值。说得简单点就是：“如果两个对象相同，那么他们的hashcode应该相等”。不过请注意：这个只是规范，如果你非要写一个类让equals(Object obj)返回true而hashcode()返回两个不相等的值，编译和运行都是不会报错的。不过这样违反了Java规范，程序也就埋下了BUG。 </p><p>规范2：如果equals(Object obj)返回false，即两个对象“不相同”，并不要求对这两个对象调用hashcode()方法得到两个不相同的数。说的简单点就是：“如果两个对象不相同，他们的hashcode可能相同”。</p><h3 id="5、为什么覆盖equals时总要覆盖hashCode"><a href="#5、为什么覆盖equals时总要覆盖hashCode" class="headerlink" title="5、为什么覆盖equals时总要覆盖hashCode"></a>5、为什么覆盖equals时总要覆盖hashCode</h3><p> 一个很常见的错误根源在于没有覆盖hashCode方法。在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不这样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable。</p><p>1.在应用程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法都必须始终如一地返回同一个整数。在同一个应用程序的多次执行过程中，每次执行所返回的整数可以不一致。</p><p>2.如果两个对象根据equals()方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。</p><p>3.如果两个对象根据equals()方法比较是不相等的，那么调用这两个对象中任意一个对象的hashCode方法，则不一定要产生相同的整数结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提高散列表的性能。</p><h3 id="6、总结："><a href="#6、总结：" class="headerlink" title="6、总结："></a>6、总结：</h3><p>1、equals方法用于比较对象的内容是否相等（覆盖以后）</p><p>2、hashcode方法只有在集合中用到</p><p>3、当覆盖了equals方法时，比较对象是否相等将通过覆盖后的equals方法进行比较（判断对象的内容是否相等）。</p><p>4、将对象放入到集合中时，首先判断要放入对象的hashcode值与集合中的任意一个元素的hashcode值是否相等，如果不相等直接将该对象放入集合中。如果hashcode值相等，然后再通过equals方法判断要放入对象与集合中的任意一个对象是否相等，如果equals判断不相等，直接将该元素放入到集合中，否则不放入。</p><p>以上从第四点以后转载至博客：<a href="https://blog.csdn.net/hla199106/article/details/46907725" target="_blank" rel="noopener">https://blog.csdn.net/hla199106/article/details/46907725</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java中-和equals和hashCode的区别&quot;&gt;&lt;a href=&quot;#Java中-和equals和hashCode的区别&quot; class=&quot;headerlink&quot; title=&quot;Java中==和equals和hashCode的区别&quot;&gt;&lt;/a&gt;Java中==和eq
      
    
    </summary>
    
    
    
      <category term="Java基础知识" scheme="https://liudong-code.github.io/tags/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>写于博客之始</title>
    <link href="https://liudong-code.github.io/2020/02/26/%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%A7%8B/"/>
    <id>https://liudong-code.github.io/2020/02/26/%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%A7%8B/</id>
    <published>2020-02-26T10:00:08.000Z</published>
    <updated>2020-02-27T07:36:23.335Z</updated>
    
    <content type="html"><![CDATA[<p>​        重新整理了之前的旧的博客，发现有部分博客有老东家的Code，想起来之前有同事因无意中泄露了公司的淘宝三段码，而受到处罚，索性就新搞了一个新的博客 地址，这几天正好因为疫情在家里面，找工作也不是很好找，就把之前的整理的东西全部搞过来。新的博客只弄了主题，其他的细节都还没整，想的是尽快的把日常干货先给弄上来。嗯，就这些吧！</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        重新整理了之前的旧的博客，发现有部分博客有老东家的Code，想起来之前有同事因无意中泄露了公司的淘宝三段码，而受到处罚，索性就新搞了一个新的博客 地址，这几天正好因为疫情在家里面，找工作也不是很好找，就把之前的整理的东西全部搞过来。新的博客只弄了主题，其他
      
    
    </summary>
    
    
    
      <category term="日常随笔" scheme="https://liudong-code.github.io/tags/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
